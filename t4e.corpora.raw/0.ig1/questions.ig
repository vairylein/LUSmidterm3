il nome di una variabile di tipo array contiene un indirizzo di una cella di memoria oppure il contenuto ? perchè?</question_text><answer id="A2591"><answer_text>Array non è un tipo ma un costruttore di tipo. Dichiarato per esempio l&#39;array di tipo intero int array[10] si predisporranno in memoria 10 celle, da 0 a 9, dove l&#39;array funzionerà proprio come un puntatore alle 10 celle predisposte in memoria di tipo intero. array[0] sarà quindi un puntatore alla prima cella e così via fino ad array[9] che punterà all&#39;ultima cella di memoria.</answer_text><num_votes>2</num_votes></answer><answer id="A2576"><answer_text>Il nome di una variabile di tipo array contiene l&#39;indirizzo del primo elemento dell&#39;array. Esso è un puntatore a tutti gli effetti. Accedendo all&#39;array mediante le parentesi quadre (es. myArray[n]), non facciamo altro che spostare l&#39;indirizzo puntato da myArray in avanti di n (n volte le dimensioni di una word: int, char, float, double a seconda del tipo dell&#39;array).</answer_text><num_votes>2</num_votes></answer><answer id="A2721"><answer_text>Il nome di una variabile di tipo array contiene un indirizzo di memoria e non il contenuto perchè il contenuto può variare e quindi verrà cambiato il contenuto della cella senza cambiare l&#39;indirizzo stesso.</answer_text><num_votes>0</num_votes></answer></question><question id="Q2673"><question_text>Nelle valutazioni di espressioni, cosa si intende con &#34;associatività&#34;? E in quale caso il suo utilizzo diventa fondamentale?
quando è possibile utilizzare il comando switch() al posto di una sequenza di if()?
Dopo una serie di if, l&#39;else alla fine a quale if viene attribuito?
Cosa fa&#39; il compilatore quando viene dichiarato un array? 
Il costrutto &#34;switch case&#34; può confrontare il valore di una variabile con dei valori derivati da un&#39;espressione specificati nell&#39;istruzione &#34;case&#34;? Motiva la risposta.
Qual è la differenza tra una stringa e un array di caratteri? Fai un esempio.
Esiste le possibilità di dichiarare un array dinamico vettore[a] con a una variabile di tipo int, in modo da poter incrementare il valore di a in un ciclo ottenendo così un array dinamico?
esiste un numero massimo di celle in un array?
Che cosa si intende con &#34;lazy evaluation&#34; in riferimento alla valutazione delle condizioni in C?</question_text><answer id="A2652"><answer_text>Con &#34;lazy evaluation&#34; si intende la possibilità di valutare un&#39;espressione solo nel momento in cui questa è richiesta o strettamente necessaria. In questo modo rispetto alle &#34;strict (o eager) evaluation&#34; si possono ottenere migliori prestazioni sia dal punto di vista dell&#39;uso della memoria che dell&#39;uso delle risorse di sistema (si evita che le valutazioni avvengano più volte o quando non necessarie). La possibilità nativa di gestire le valutazioni in questo modo non è presente in tutti i linguaggi ma può essere comunque implementata.</answer_text><num_votes>2</num_votes></answer><answer id="A2569"><answer_text>Con &#34;lazy evaluation&#34; si indica una strategia di valutazione secondo la quale un&#39;espressione viene computata solo nel momento in cui questa è richiesta. Ciò permette un&#39;ottimizzazione delle prestazioni perché evita che un&#39;espressione venga computata più volte o quando non necessaria. Rispetto ad una &#34;strict evaluation&#34;, si hanno benefici sia per quanto riguada l&#39;impronta di memoria del programma, sia per quanto concerne la richiesta di prestazioni verso il calcolatore.</answer_text><num_votes>0</num_votes></answer></question><question id="Q2641"><question_text>Dato che una funzione non può restituire come risultato un array, come si può inizializzarne uno tramite una funzione o procedura esterna al main?</question_text><answer id="A2718"><answer_text>Iniziamo dicendo che la domanda è valida solo per le funzioni, perché le procedure non possono restituire nulla. Per inizializzare un array con una funzione è necessario passare come parametro un puntatore che punta al primo elemento dell&#39;array. Ora sfruttando il puntatore possiamo usare effettivamente l&#39;array e con un semplice ciclo for lo inizializziamo come sempre, all&#39;interno della funzione. Alla fine la funzione dovrà restituire il puntatore al main. </answer_text><num_votes>2</num_votes></answer><answer id="A2725"><answer_text>Per inizializzare un array tramite funzione è necessario realizzare una funzione che generi valori casuali, generalmente chiamata &#34;random&#34; e chiamarla all&#39;interno di un ciclo for che analizzi ogni singola cella dell&#39;array. Così facendo l&#39;array si riempirà di valori casuali.</answer_text><num_votes>0</num_votes></answer></question><question id="Q2761"><question_text>Cosa succede se in C, in un&#39;istruzione condizionale, la condizione è a=5 (es. if(a=5) ... NB manca un uguale)? Quali sono le insidie di questo errore?
Dare la definizione di array. Gli array dinamici sono utilizzabili nel linguaggio C? Che vantaggi danno?
Perché nel dichiarare un qualsiasi Array si usa definire il numero massimo di elementi che questo può contenere quando si potrebbe semplicemente dichiarare un Array dinamico? 
E&#39; possibile avere un array dove ogni elemento è un array? fare un esempio e mostrare come si può accedere ai diversi elementi.
Per quale motivo non si può operare l&#39; assegnazione tra array?( Ad esempio se si hanno due array di interi x e y, non si può scrivere x=y)
spiega brevemente cos&#39;è un array? e che tipi di array si possono avere nel linguaggio c?
Quando ha luogo un errore di segmentazione? Può verificarsi in linguaggio C?
Il linguaggio di programmazione in C è &#34;case sensitive&#34;? Cosa si intende per &#34;case sensitive&#34;?
Che cosa si intende per &#34;condizione&#34; (o &#34;espressione booleana&#34;) e da cosa è costituita?
Come vengono valutate le espressioni? Se ci sono operatori di uno stesso tipo come ci si comporta?
Per quale motivo un array deve avere dimensioni fisse?
Quali sono i limiti del dato strutturato array?
Elencare i modi con cui è possibile inizializzare un array.
Perchè l&#39;indice di un array non è compreso tra 1 e n, ma tra 0 e n-1?</question_text><answer id="A2549"><answer_text>perchè in C un array è essenzialmente un puntatore ad una cella di memoria, quindi il primo di elemento contenuto in un array è salvato nella memoria esattamente nel punto [0].</answer_text><num_votes>2</num_votes></answer><answer id="A2688"><answer_text>Perchè i creatori del linguaggio di programmazione hanno deciso che sia così, per convenzione.</answer_text><num_votes>1</num_votes></answer><answer id="A2571"><answer_text>perche l&#39;indice di un array parte dal numero 0 fino ad n-1 e poi l&#39;ultima cella dell&#39;array è riservata al carattere di fine stringa ed è nota con  &#34;\0&#34;</answer_text><num_votes>0</num_votes></answer></question><question id="Q2619"><question_text>Qual è il metodo più efficiente per scorrere un array con un numero molto grande di elementi?
Scrivi un&#39;espressione che permetta di ottenere il numero di righe di un array multidimensionale utilizzando la funzione sizeof().
Perché quando si vuole dichiarare una stringa di n caratteri l&#39;array deve avere dimensione n+1?</question_text><answer id="A2585"><answer_text>Deve avere dimensione n+1 poichè ogni array come ultima posizione deve contenere il carattere speciale NULL. Il carattere viene utilizzato per capire dove finisce la stringa. Dunque il nostro array avrà dimensione n+1 per una stringa lunga n e in posizione n+1 troviamo il carattere speciale NULL. </answer_text><num_votes>0</num_votes></answer><answer id="A2734"><answer_text>La stringa è definita in C come un array di caratteri terminante con la variabile &#39;\0&#39;. Durante l&#39;indicizzazione dobbiamo quindi considerare che nel nostro array è contenuto anche questo termine che andrà a diminuire lo spazio effettivo e utilizzabile all&#39;interno della nostra stringa. E&#39; quindi questa la motivazione per cui quando necessitiamo di una stringa di n caratteri dobbiamo dichiararla di dimensione n+1.</answer_text><num_votes>0</num_votes></answer><answer id="A2595"><answer_text>Perchè bisogna riservare l&#39;ultimo posto dell&#39;array per il carattere &#39;\0&#39; che è il carattere di &#34;fine stringa&#34;</answer_text><num_votes>1</num_votes></answer><answer id="A2735"><answer_text>La stringa è definita in C come un array di caratteri terminante con la variabile &#39;\0&#39;. Durante l&#39;indicizzazione dobbiamo quindi considerare che nel nostro array è contenuto anche questo termine che andrà a diminuire lo spazio effettivo e utilizzabile all&#39;interno della nostra stringa. E&#39; quindi questa la motivazione per cui quando necessitiamo di una stringa di n caratteri dobbiamo dichiararla di dimensione n+1.</answer_text><num_votes>1</num_votes></answer><answer id="A2562"><answer_text>Perchè un array di caratteri deve contenere in ultima posizione il valore speciale NULL, che indica dove finisce la stringa.</answer_text><num_votes>1</num_votes></answer></question><question id="Q2664"><question_text>In un array è possibile avere dati di tipi diversi o no? 
Che differenza c&#39;è nell&#39; incolonnare più istruzioni condizionali in sequenza e comporre più istruzioni condizionali nidificate?
Qual è la differenza tra un array ed una matrice? 
Ricordando la definizione e la funzione di puntatore commenta l&#39;affermazione:&#34;Un puntatore è una variabile che memorizza un indirizzo in memoria&#34;. Quali sono i vantaggi un puntatore rispetto ad altre variabili come array e struct??
Spiegare la differenza tra il costrutto &#34;if&#34; e il costrutto &#34;if-else&#34;.
Perchè nell&#39;acquisizione da tastiera di una stringa è preferibile utilizzare il comando &#34;gets&#34; piuttosto che &#34;scanf&#34;?
A cosa serve e quando si usa la funzione &#34;enum&#34;?
E&#39; possibile sapere a priori la lunghezza di un dato array gia inizializzato da terzi in precedenza?
In che modo il programmatore può definire un &#34;tipo&#34;?
che differenza c&#39;è tra un ciclo for, un ciclo while ed un ciclo do-while?
E&#39; possibile modificare la grandezza di un array in un secondo momento, dopo averlo dichiarato?
Cosa succede quando si cerca di inserire più dati di quanto possa contenere un array(Cos&#39;è l&#39;overflow)?
Un unico array può contenere variabili di tipo diverso (int, float, char ecc...)? perchè?</question_text><answer id="A2606"><answer_text>No; un array in C per definizione é un insieme di più dati omogeneo quindi un insieme di dati dello stesso tipo. Infatti nella definizione di un array in questo linguaggio di programmazione  [per esempio &#34;int array[N]&#34;] si necessita in primis di scrivere l&#39;UNICO tipo di dato che l&#39;array può contenere. Ovviamente è possibile fare array di tutti i tipi di dati base e non; anche di quelli &#34;creati&#34; dal programmatore, i quali loro volta invece possono essere non omogenei e contenere dati di tipo differente (vedi typedef). L&#39;array in se resta comunque omogeno perchè a[0],a[1], ecc sono tutti uguali.</answer_text><num_votes>1</num_votes></answer><answer id="A2625"><answer_text>Un unico Array non può contenere variabili di tipo diverso, perché altrimenti non sarebbe un Array e non avrebbe un funzionamento corretto. Dalla definizione sappiamo che un Array è una variabile strutturata contenente un insieme di valori tutti dello stesso tipo (omogenei), individuata da un unico nome collettivo (identificatore); e quindi se utilizziamo una variabile int non possiamo utilizzare una variabile di tipo char.</answer_text><num_votes>1</num_votes></answer></question><question id="Q2782"><question_text>In che modo si può incrementare la precedenza all&#39;interno di un&#39;espressione?</question_text><answer id="A2597"><answer_text>Non ha senso parlare di &#34;incremento&#34; della precedenza, in un espressione, si può però modificare il naturale ordine di precedenza degli operatori con l&#39;uso delle parentesi. </answer_text><num_votes>1</num_votes></answer><answer id="A2680"><answer_text>si può incrementare la precedenza all&#39;interno di un&#39;espressione utilizzando l&#39;operatore &#34;+&#34; appartenete al gruppo degli additivi.</answer_text><num_votes>1</num_votes></answer></question><question id="Q2670"><question_text>Cosa caratterizza un array di caratteri?
Perchè una volta dichiarato un array non è più possibile variare la sua dimensione?
L&#39;inizializzazione in fase di dichiarazione è un&#39;operazione applicabile ad un intero array? (cioè non ai singoli elementi dell&#39;array)
Cos&#39;è un programma?
Qual e&#39; la differenza tra Compilazione ed Interpretazione di un programma? Quali sono i vantaggi e gli svantaggi? Infine, in quali casi e&#39; meglio adottare una soluzione rispetto all&#39;altra?
Quali sono le cinque principali istruzioni nel linguaggio C? Elencale e descrivile brevemente.
Qual è il numero massimo di celle di un array? Cosa dev&#39;essere sempre incluso in questo tipo di atruttura complessa?
Che differenza c&#39;è tra variabile e puntatore?
Che cos&#39;è un &#34;tipo&#34; di dato?</question_text><answer id="A2370"><answer_text>In C un tipo di dato e&#39; un nome che caratterizza i valori che puo&#39; assumere una varianile. </answer_text><num_votes>0</num_votes></answer><answer id="A2461"><answer_text>Un tipo di dato è il formato che quel dato può assumere. In altre parole indica l&#39;insieme dei valori che una variabile o il risultato di un espressione possono assumere e le operazioni effettuabili su tali valori. Se, ad esempio, dichiariamo una variabile di tipo intero (int), i valori che questa variabile può assumere sono solamente i numeri interi. In altre parole se assegniamo a questa variabile un espressione il cui risultato da un numero con la virgola, il compilatore darà un messaggio di errore in quanto il tipo di dato della variabile è un intero. </answer_text><num_votes>3</num_votes></answer></question><question id="Q2546"><question_text>Che differenza c&#39;è tra il ciclo &#34;while&#34; e il ciclo &#34;do while&#34;?
Come posso definire una struttura all&#39;interno dell&#39;ambiente di programmazione C, che vantaggi comporta?</question_text><answer id="A2441"><answer_text>Il più semplice dato struttura è l&#39;arrey. Esso è un raccoglitore di tante variabili che si distinguono per il loro indice indicato tra parentesi. Una volta dichiarato il compilatore riserverà in memoria uno spazio sufficiente a memorizzare le variabili</answer_text><num_votes>0</num_votes></answer><answer id="A2372"><answer_text>Il costruttore di tipi struct in C permette di definire strutture aggregando elementi di tipi diversi; tali elementi si chiamano campi della struttura. Infatti, in questo caso, risulterebbe del tutto impossibile strutturare l&#39;informazione mediante il meccanismo dell&#39;array, poiché esso richiede che tutti i suoi elementi siano omogenei. I valori dei tipi costruiti mediante struct sono costituiti da una sequenza di altri valori, i valori dei campi, appartenenti ad altri tipi qualsiasi. Il fatto che struct sia un costruttore di tipi implica che esso può essere impiegato esattamente come un array. </answer_text><num_votes>3</num_votes></answer><answer id="A2423"><answer_text>Si può definire una struttura attraverso il tipo struct. In questo modo è possibile incapsulare gruppi di variabili correlate, raggruppando quelle che appartengono logicamente allo stesso oggetto. Il programma guadagna leggibilità, sfruttando una rappresentazione gerarchica dei dati. E&#39; utile quando si gestiscono informazioni (anche eterogenee) che caratterizzano però uno stesso dato. Così è anche possibile assegnare (o passare a/da una funzione) tutte le parti di un aggregato in un unico dato.</answer_text><num_votes>1</num_votes></answer></question><question id="Q2560"><question_text>Come si dichiara un puntatore?
Perché quando si usa la funzione scanf con le stringhe non serve mettere la &#38; per indicare l&#39;indirizzo della variabile in cui il risultato inserito da tastiera deve essere memorizzato?
Che cos&#39;è un tipo strutturato, a cosa serve e come viene dichiarato in C?
Quali sono le operazioni applicabili a variabili di tipo puntatore?
E&#39; possibile implementare dei pezzi di codice in assembler in un sorgente scritto in C o C++?
Che cos&#39;è il linguaggio assembler e che funzione ha ? 
Quali operazioni sono possibili su un intero array? è possibile ad esempio copiare o stampare un intero array piuttosto che tutti i suoi elementi in sequenza (attraverso un ciclo)?
Nella scrittura di un programma quanto incide l&#39;ottimizzazione rispetto alla funzionalità? Si ottimizza una volta che è stato reso funzionate o già in sede di scrittura iniziale?
Perchè scrivendo while() si otterrà in uscita un programma con un ciclo infinito? 
Da cosa si differenziano le codifiche ASCII e quella Unicode? Perché la seconda ha preso il sopravvento sulla prima in ambito web?
Cosa si intende, nel linguaggio di programmazione in c, per tipi fondamentali e tipi derivati?
Che cosa si intende per &#34;macchina astratta C&#34;?
Che cosa auccede se si omette il break all&#39;interno del costrutto switch? 
Ci sono differenze per cui sia meglio usare l&#39;istruzione switch piuttosto che una serie di if else nidificati?</question_text><answer id="A2447"><answer_text>In linea generale le due istruzioni hanno prestazioni simili. Tuttavia se le condizioni di una casistica hanno tutte la forma &#34;x==k&#34; l&#39;istruzione switch risulta più leggibile ed immediata. Un altro caso in cui è consigliato usare lo switch è quando la variabile di controllo fa parte di una funzione, in quando questa verrebbe richiamata soltanto una volta, mentre con l&#39;istruzione if-else verrebbe richiamata per ogni &#34;if/else-if/else&#34;. Infine mentre l&#39;istruzione switch esce(&#34;break&#34;) dal ciclo una volta eseguito un &#34;case&#34;, l&#39;if-else confronta e esegue tutte le condizioni.</answer_text><num_votes>0</num_votes></answer><answer id="A3438"><answer_text>Una serie di if-else nei quali vogliamo confrontare un singolo valore intero rispetto a diversi valori costanti alternativi può essere realizzata mediante il comando condizionale &#34;a più vie&#34; switch. L&#39;enunciato switch si può usare solo in circostanze limitate. I valori con i quali si può confrontare il selettore devono essere costanti di tipo intero, char o enumerativo: non si può usare lo switch ad esempio con un selettore di tipo double o String. Anche quando è lecito, non sono molti i casi in cui è opportuno che l&#39;istruzione switch sostituisca l&#39;istruzione if-else (esempio range valori int)</answer_text><num_votes>0</num_votes></answer><answer id="A2375"><answer_text>La differenza è solo stilistica: è più leggibile uno switch rispetto a molti if nidificati.</answer_text><num_votes>1</num_votes></answer><answer id="A2392"><answer_text>A livello di risultato finale no, ma a livello di ottimizzazione del programma e pulizia del codice e&#39; preferibile utilizzare il costrutto switch, anche perche&#39; evita al compilatore di imbattersi in casistiche nelle quali si sarebbe trovato leggendo tutti gli if-else andando invece a leggere solo la casistica interessata.</answer_text><num_votes>1</num_votes></answer></question><question id="Q2490"><question_text>In che modo posso usufruire dei puntatori per la gestione di array?
Per quale motivo l&#39;identificatore predefinito &#34;main&#34; viene dichiarato come numero intero &#34;int&#34;? A cosa serve la struttura (int argc, char *argv[]) che lo segue?
Che differenze ci sono tra un ciclo for e un ciclo while?
In cosa consiste la tecnica della valutazione &#34;pigra&#34; (lazy-evaluation) utilizzata in C/C++?
Quali sono le fasi dello sviluppo di un programma C? In che cosa consistono?
Una delle caratteristiche del linguaggio C è quella di essere &#34;case sensitive&#34;. Questo cosa significa?
Gli operatori di assegnamento x++ e ++x svolgono la stessa funzione? Se assumo x=3, qual è la differenza tra la stampa &#34;printf(&#34;%d&#34;, x++)&#34; e la stampa &#34;printf(&#34;%d&#34;, ++x)&#34;?
Abbiamo visto tre metodi per dichiarare una struttura: struct nome{ ...., struct { ... e alla fine il nome prima del punto e virgola, poi l&#39;ultimo metodo col typedef struct{..., e infine il nome della struttura stessa. Spiegare le principali differenze su questi metodi e sopratutto i vantaggi e svantaggi di tali metodi.
Che cosa è un array? In quali casi risulta utile in suo impiego?
In che cosa consiste la procedura di programmazione top-down? Quali vantaggi porta e in che casi viene utilizzata?
Cosa contraddistingue il livello di astrazione del linguaggio C?
che cosa vuol dire la scritta : &#34;#include &#60;stdio.h&#62;&#34;
Quando si programma si utilizzano delle variabili e/o delle costanti: a cosa servono le variabili e le costanti, in cosa differiscono tra loro e da cosa sono caratterizzate?
per quanto riguardo l&#39;ordinamento degli array, quale è la differenza tra bubble sort e merge sort? Quale è la più efficiente?
A cosa servono i puntatori,in quali casi vengono usati?
Qual è la differenza fra &#34;#define A 20&#34; e &#34;const int A = 20&#34; visto che in entrambi i modi A è una costante con il valore di 20?
Ci sono due modi per decodificare un numero decimale di tipo reale in forma binaria: decodifica a virgola fissa e a virgola mobile. In cosa consiste e come funziona la rappresentazione in virgola mobile? Quali sono i vantaggi rispetto alla decodifica in virgola fissa? 
Perché il linguaggio C viene definito ad alto livello?
Perchè il linguaggio C, nonostante sia stato inventato decine di anni fa è ancora in completo utilizzo, almeno in alcuni campi?
Quando è consigliabile utilizzare il ciclo while, e  quando il ciclo for?
Quale differenza esiste tra l&#39;istruzione condizionale &#34;if&#34; e l&#39;istruzione iterativa (ciclo) &#34;while&#34;?</question_text><answer id="A2412"><answer_text>Entrambi sono dei costrutti di controllo del flusso di programma, utilizzati per eseguire dei sottoprogrammi solo al verificarsi di determinate condizioni. Il costrutto &#34;if&#34; prevede l&#39;esecuzione del sottoprogramma ad esso associato UNA sola volta e mette a disposizione &#34;una seconda scelta&#34;, ovvero un altro sottoprogramma da eseguire nel caso in cui la condizione dell&#39;&#34;if&#34; non venga rispettata. Il costrutto &#34;while&#34;, invece, implementa un ciclo e quindi consente di eseguire il sottoprogramma associato PIU&#39; VOLTE di seguito, fino a quando la condizione di ingresso al ciclo viene rispettata.</answer_text><num_votes>2</num_votes></answer><answer id="A2390"><answer_text>If valuta una condizione per la quale, se soddisfatta, svolge un compito assegnato una sola volta mentre while continua a svolgerlo finchè la condizione assegnata non è più vera. Ad esempio se assegniamo la condizione i&#60;10 con i=5 l&#39;istruzione if svolgerà il suo compito una sola volta (o mai se i&#62;10) mentre while continuerà a farlo all&#39;infinito a meno che il valore di i non cambi nel tempo assumendo un valore maggiore di 10 (o come con if non svolgerà nessun compito se i&#62;10 già in partenza).</answer_text><num_votes>0</num_votes></answer><answer id="A2497"><answer_text>IF(espressione){istruzione_1;}else{istruzione_2;} esegue l&#39;istruzione un&#39;unica volta solo se, una volta valutata l&#39;espressione, questa risulta vera. Altrimenti, viene eseguita l&#39;istruzione_2, se presente. In mancanza di {}, con IF innestate, la parte else viene abbinata sempre all&#39;ultima IF posta nel blocco. WHILE(espressione){istruzione;} ripete l&#39;istruzione fintanto che l&#39;espressione non risulta falsa.</answer_text><num_votes>1</num_votes></answer></question><question id="Q2445"><question_text>Cosa si intende per strong typing e loose typing nei linguaggi di programmazione?
Quali sono le tre fasi principali nell&#39;esecuzione di un programma? descrivile 
cosa si intende per &#34;pseudo-codice&#34;?
Quali differenze ci sono tra un Array, un Vettore e una Stringa nel linguaggio di programmazione C?
In quali casi le variabili vengono dichiarate globali (fuori dal metodo &#34;main&#34;) e locali (dentro al metodo &#34;main&#34;)?
Definizione di un array. In C come si accede ad una precisa cella di un array?
Qual&#39;è la differenza tra gli operatori di incremento x++ e ++x? Vale allo stesso modo per i due operatori di decremento x-- e --x?
Perchè la memoria RAM possiede una velocità di scrittura e lettura superiore a un HardDisk?</question_text><answer id="A2275"><answer_text>L&#39;HardDisk risulta estremamente piÃ?Â¹ lento rispetto a una memoria RAM a causa delle operazioni fisiche, delle attivitÃ?Â Ã?Â  di lettura, indirizzamento necessarie e dell&#39;enorme quantitÃ?Â Ã?Â  di informazioni che questi supporti possono contenere.I dati presenti sull&#39;HD, infatti, non vengono persi una volta avvenuto l&#39;arresto. Questa Ã?Â¨ una differenza sostanziale,che va a pesare in termini di velocitÃ?Â Ã?Â ,con la RAM che Ã?Â¨ una memoria volatile e alla chiusura del computer perde tutti i dati contenuti.</answer_text><num_votes>3</num_votes></answer><answer id="A2108"><answer_text>Perchè la memoria RAM è una memoria con tempo d&#39;accesso casuale,ovvero che non dipende dalla posizione(indirizzo) della parola di codice.Questo avviene grazie al registro di indirizzi,il quale denota ogni parola di codice con un indirizzo di k bit:al momento dell&#39;accesso basterà conoscere il suo indirizzo per individuarla velocemente;e grazie al registro di dati che contiene già la word da memorizzare.Negli HD questo processo deve essere fatto scrivendo/leggendo singoli bit 0/1 da dischi fisici.</answer_text><num_votes>3</num_votes></answer><answer id="A2270"><answer_text>L&#39; HardDisk e&#39;  composto da piu&#39; dischi sormontati da una testina che scrive o legge il contenuto del disco stesso,il tutto e&#39; contenuto in un involucro metallico collegato alla scheda madre per mezzo di un cavo e ogni byte viene scritto e la sua posizione registrata in una tabella chiamata file system. Tutto cio&#39; rende l&#39;HardDisk piu&#39; lento della RAM, la quale e&#39; invece composta da elementi hardware collegati direttamente alla scheda madre  e che dialogano molto piu&#39; velocemente con la stessa </answer_text><num_votes>0</num_votes></answer></question><question id="Q2329"><question_text>Quali sono le differenze principali tra il concetto di &#34;compilazione&#34; e quello di &#34;interpretazione&#34; di un linguaggio?
A cosa serve e come funzione il registro interruzioni? Ha una qualche correlazione con la gestione degli interrupt del linguaggio C?</question_text><answer id="A2086"><answer_text>Contiene informazioni relative al funzionamento delle periferiche. Se una periferica o un processo devono contattare la CPU verrà inviato un segnale su questo registro.In seguito il processore memorizza il suo stato di esecuzione fino all&#39;arrivo dell&#39;interrupt ed inizia l&#39;esecuzione della subroutine che esegue la richiesta dell&#39;interrupt, infine il processore riprende l&#39;esecuzione delle operazioni che stava elaborando.Il C è in grado di sfruttare gli interrupt a seconda della funzione richiesta.</answer_text><num_votes>4</num_votes></answer><answer id="A2091"><answer_text>L&#39;INTR è un registro contenente informazioni relative all’operatività delle periferiche e il suo funzionamento è strettamente legato agli interrupts di C. I codici che contengono le informazioni per gestire gli interrupts sono salvati in memoria, in posizioni fisse relative ad un indirizzo di base tramite un offset di memoria.Questo offset è contenuto proprio nel registro di interrupt e quando una periferica invia un interrupt, l’INTR si aggiorna in base alla posizione di offset corrispondente. </answer_text><num_votes>1</num_votes></answer><answer id="A2274"><answer_text>Il registro interruzioni tiene memoria delle richieste di attenzione da parte delle unitÃ  esterna che richiedono attenzione in tempo reale. Se non ci fosse il registro questa richiesta fermerebbe l&#39;unitÃ  logica perdendo quanto fatto fino a quel momento. A livello di software invece questo sistema permette di richiamare un programma chiamato da uno chiamante. Quindi c&#39;Ã¨ una forte correlazione in quanto a livello software si applica la stessa procedura dell&#39;hardware per il real-time delle per.</answer_text><num_votes>0</num_votes></answer><answer id="A2184"><answer_text>Il registro interruzioni, insieme ad un segnale, fa&#39; sì che l&#39;interfaccia sia in grado di generare l&#39;interruzione e viene inserito nella realizzazione dell&#39;interfaccia stessa. La sua funzione è quella di bloccare un&#39;operazione quando una più importante deve essere compiuta. C&#39;è correlazione tra registro e gestione delle interruzioni poichè, una volta che il registro permette che l&#39;interfaccia generi l&#39;interruzione, il processore interrompe le operazioni ed esegue una gestione delle interruzioni.</answer_text><num_votes>1</num_votes></answer></question><question id="Q2216"><question_text>Che relazione esiste tra la frequenza del clock e la velocità del computer?</question_text><answer id="A2267"><answer_text>La velocitÃ?Â  di elaborazione di un computer Ã?Â¨ direttamente proporzionale alla velocitÃ?Â  di clock della CPU. Infatti una velocitÃ?Â  di clock elevata garantisce un maggior numero di istruzioni eseguite nell&#39;unitÃ?Â  di tempo, nonostante non sia l&#39;unico fattore che concorre ala velocitÃ?Â  di una macchina.</answer_text><num_votes>1</num_votes></answer><answer id="A2261"><answer_text>Il clock è un orologio interno al calcolatore che grazie a degli impulsi da lui generati scandisce il lavoro della CPU (Central Processing Unit). Di conseguenza maggiore è la frequenza degli impulsi del clock e maggiori sono le operazioni che il calcolatore può eseguire nell&#39;unità di tempo.</answer_text><num_votes>1</num_votes></answer><answer id="A2157"><answer_text>La velocità o frequenza di clock è il numero di commutazioni tra i due livelli logici &#34;0&#34; e &#34;1&#34; che l&#39;unità  di elaborazione (CPU) è in grado di eseguire nell&#39;unità  di tempo di un secondo, ed è espressa in cicli al secondo, o Hertz. La frequenza del clock e la velocità del computer sono direttamente proporzionali: infatti, maggiore è la frequenza, più sono le operazioni che possono essere eseguite nello stesso lasso di tempo e quindi maggiore è la velocità del computer.</answer_text><num_votes>3</num_votes></answer></question><question id="Q2234"><question_text>Quali sono le leggi di De Morgan e in cosa consistono?
In che modo l&#39;unità di controllo rende possibile l&#39;esecuzione di un&#39;istruzione e quali registri vengono chiamati in causa durante questa fase di esecuzione?
Quali sono gli operatori booleani e le loro proprietà? Come vengono rappresentati nel linguaggio di programmazione c ? 
a che cosa serve la codifica CA2 in &#34;complemento a 2 per i numeri interi&#34;?</question_text><answer id="A2118"><answer_text>La codifica ca2 nel complemento a due per i numeri interi serve per trovare il valore decimale di un  numero intero con segno partendo da un numero binario o viceversa. Infatti se il bit più significativo(MSB), ovvero quello più a sinistra è 0 il numero decimale sarà sicuramente positivo, al contrario se l&#39;MSB è 1 il numero sarà negativo. Nella codifica ca2 con n bit è possibile rappresentare i valori da -2^(n-1) a 2^(n-1)-1.</answer_text><num_votes>3</num_votes></answer><answer id="A2125"><answer_text>la codifica CA2 serve per rappresentare i numeri negativi nel sistema binario, con tale sistema si ha che il bit iniziale (più a sinistra) del numero, segnala se questo sia negativo (1) o positivo (0), consente inoltre di avere una sola rappresentazione dello 0 e richiede un solo circuito per somma e sottrazione</answer_text><num_votes>2</num_votes></answer><answer id="A2122"><answer_text>La codifica in CA2 ti permette di rappresentare numeri interi negativi e risulta molto utile in ambiente informatico perchè il calcolatore non deve controllare il segno del numero rappresentato per sapere se deve usare l&#39;addizione o la sottrazione ma semplicemente svolge una sola operazione, ovvero l&#39;addizione velocizzando il tutto.</answer_text><num_votes>0</num_votes></answer></question><question id="Q2335"><question_text>A cosa serve la fase di interpretazione nel funzionamento del processore?
Come posso rappresentare, all&#39;interno dell&#39;ambiente di programmazione C, numeri decimali con un&#39;ingente quantità di cifre dopo la virgola? tra le varie modalità di rappresentazione, quale è la più conveniente in termini di risorse?
che differenza c&#39;è tra #define N 50 e const int N=50 ?
Quali sono i registri nella CPU e quale è la loro funzione/utilizzo?
I dati e le istruzioni sono eseguiti dall&#39;unità di elaborazione solo se codificati in forma binaria; allora perché nei calcolatori i dati/le istruzioni vengono spesso memorizzati/e in una forma ottale o esadecimale?</question_text><answer id="A2119"><answer_text>Per approssimare il meno possibile, dato che la forma binaria presenta solo i numeri 0 e 1.</answer_text><num_votes>0</num_votes></answer><answer id="A2113"><answer_text>Perché entrambi sono molto utili per la memorizzazione dei valori nei registri in quando ogni loro cifra traduce rispettivamente 3(ottale) e 4(esadecimale) bit nel sistema binario. In particolare il sistema esadecimale permette di memorizzare dei valori anche molto grandi utilizzando, in termini di byte, una minor quantità di memoria. Ad esempio un byte può essere espresso tramite solamente due cifre esadecimali permettendo così un risparmio di memoria.</answer_text><num_votes>1</num_votes></answer><answer id="A2114"><answer_text>Perché entrambi sono molto utili per la memorizzazione dei valori nei registri in quando ogni loro cifra traduce rispettivamente 3(ottale) e 4(esadecimale) bit nel sistema binario. In particolare il sistema esadecimale permette di memorizzare dei valori anche molto grandi utilizzando, in termini di byte, una minor quantità di memoria. Ad esempio un byte può essere espresso tramite solamente due cifre esadecimali permettendo così un risparmio di memoria.</answer_text><num_votes>2</num_votes></answer></question><question id="Q2328"><question_text>Quali sono le differenze e le analogie, se presenti, tra un calcolatore a 32bit ed uno a 64bit? Quali vantaggi o svantaggi porta un&#39;architettura rispetto all&#39;altra?
Cosa significa che due espressioni booleane sono equivalenti?
lL CPU al suo interno contiene un &#34;clock&#34; che scandisce il lavoro tramite impulsi. Un calcolatore con una velocità di clock elevata è sempre più performante di uno con una velocità di clock più bassa? Motivare la risposta.</question_text><answer id="A2280"><answer_text>La velocitÃ  di clock, o frequenza, Ã¨ il numero di commutiziano che riesce a compiere tr i livelli logici &#34;0&#34; e &#34;1&#34; in un secondo. PiÃ¹ la frequenza Ã¨ elevata e piÃ¹ commutazioni riesce a compiere, tuttavia la frequenza dev&#39;essere calcolata in modo tale che ogni circuito riesca a completare le proprie operazioni. Se la frequenza Ã¨ troppo elevata ed i circuiti non riesco a completare i calcoli la CPU non Ã¨ piÃ¹ performante.</answer_text><num_votes>0</num_votes></answer><answer id="A2084"><answer_text>Il clock è un circuito generatore di impulsi che fornisce al processore la scansione temporale per l&#39;esecuzione delle singole operazioni logiche. La risposta alla domande è no. Infatti, quello che bisogna considerare in una CPU è, insieme alla frequenza di clock, il numero di istruzioni per clock. Inoltre, ad esempio, l&#39;architettura multi core adottata ormai da quasi tutte le CPU dei calcolatori moderni consente di aumentare la potenza di calcolo senza aumentare la frequenza di clock di lavoro. </answer_text><num_votes>1</num_votes></answer><answer id="A2278"><answer_text>La velocitÃ  di clock, o frequenza, Ã¨ il numero di commutiziano che riesce a compiere tr i livelli logici &#34;0&#34; e &#34;1&#34; in un secondo. PiÃ¹ la frequenza Ã¨ elevata e piÃ¹ commutazioni riesce a compiere, tuttavia la frequenza dev&#39;essere calcolata in modo tale che ogni circuito riesca a completare le proprie operazioni. Se la frequenza Ã¨ troppo elevata ed i circuiti non riesco a completare i calcoli la CPU non Ã¨ piÃ¹ performante.</answer_text><num_votes>0</num_votes></answer><answer id="A2213"><answer_text>si, lo è poichè un clock con frequenza maggiore riesce a eseguire le stesse istruzioni in un periodo di tempo minore(rispetto ad un clock con frequenza minore).</answer_text><num_votes>0</num_votes></answer><answer id="A2279"><answer_text>La velocitÃ  di clock, o frequenza, Ã¨ il numero di commutiziano che riesce a compiere tr i livelli logici &#34;0&#34; e &#34;1&#34; in un secondo. PiÃ¹ la frequenza Ã¨ elevata e piÃ¹ commutazioni riesce a compiere, tuttavia la frequenza dev&#39;essere calcolata in modo tale che ogni circuito riesca a completare le proprie operazioni. Se la frequenza Ã¨ troppo elevata ed i circuiti non riesco a completare i calcoli la CPU non Ã¨ piÃ¹ performante.</answer_text><num_votes>0</num_votes></answer><answer id="A2277"><answer_text>La velocità  di clock, o frequenza, è il numero di commutiziano che riesce a compiere tra i livelli logici &#34;0&#34; e &#34;1&#34; in un secondo. Più  la frequenza è elevata e più commutazioni riesce a compiere, tuttavia la frequenza dev&#39;essere calcolata in modo tale che ogni circuito riesca a completare le proprie operazioni. Se la frequenza è troppo elevata ed i circuiti non riesco a completare i calcoli la CPU non è più performante.</answer_text><num_votes>1</num_votes></answer></question><question id="Q2307"><question_text>Perchè esiste il registro interruzioni(INTR)? In particolare, a cosa serve nel funzionamento del processore?
Che differenza c&#39;è tra memoria RAM e memoria cache? Trattano tipi di dato differenti o elaborano operazioni differenti o altro?
Perchè la SRAM consente un accesso più rapido della RAM alle informazioni? Perchè la sua capacità è molto minore rispetto alla memoria RAM?
Come mai è necessario dichiarare le variabili nella programmazione?</question_text><answer id="A2305"><answer_text>PerchÃ¨ dichiarando la variabile viene valutata e definita la quantitÃ  di memoria destinata a contenere i dati a cui la variabile si riferisce. La quantitÃ  di memoria che viene allocata dipende dal tipo di variabile che si dichiara. Nella dichiarazione si specifica il tipo della variabile, in modo che il compilatore possa verificare eventuali errori semantici presenti all&#39;interno di un programma che sintatticamente risulta corretto (es. moltiplicare una variabile stringa per una variabile intera). Se non viene dichiarata una variabile il compilatore si accorge dell&#39;anomalia e da errore.</answer_text><num_votes>4</num_votes></answer><answer id="A2318"><answer_text>La memoria RAM è una risorsa limitata che viene condivisa dai processi dell&#39;intero sistema. In quest&#39;ottica, la dichiarazione delle variabili ne permette una corretta gestione: saranno definiti gli indirizzi disponibili e riservati in numero e dimensione necessari a contenere le variabili del tipo dichiarato. Queste aree di memoria allocate saranno riempite in esecuzione del programma. In più, la dichiarazione tipizzata permette al compilatore di verificare eventuali errori semantici nel codice.</answer_text><num_votes>1</num_votes></answer><answer id="A2136"><answer_text>Il compilatore deve riservare in memoria lo spazio necessario all&#39;inizializzazione di ciascuna variabile. Bisogna tenere presente che se la variabile non viene inizializzata, lo spazio di memoria assegnatole potrebbe contenere già un valore. </answer_text><num_votes>0</num_votes></answer></question><question id="Q2237"><question_text>Perchè per leggere una memoria volatile superiore a 4096 MB serve un architettura a 64 bit?
Qual&#39;è la relazione tra il numero di bit che costituisce un indirizzo di memoria e lo spazio di indirizzamento a disposizione?
Quali sono i principali operatori logici e qual è l&#39;ordine di priorità tra essi?
Esistono fattori che influenzano la velocità di calcolo del processore?
Quando si parla di un sistema operativo basato su micro-kernel cosa si intende? E in un sistema operativo Micro-Kernel le applicazioni utente possono essere eseguiti in modalità Kernel mode?
Quali sono le proprietà degli operatori Booleani ?
Descrivere le fasi che il processore (CPU) svolge per eseguire un&#39;istruzione.
Come viene implementata l&#39;algebra di Boole a livello hardware?
Come avviene la gestione delle periferiche di sistema? è a carico del bus o del sistema operativo? cosa sono il polling e l&#39;interrupt?
Cosa si intente per Raid (Redundant Array of Inexpensive Disks) e che tipi di Raid esistono?
Che cosa si intendo con il termine &#34;macchina virtuale&#34;?
Come avviene la lettura di un dato nella RAM tramite la cpu e come la scrittura sempre tramite la cpu? 
In che modo il numero di bit (caratteristico del processore) che costituisce un indirizzo di memoria influenza la quantità di memoria che è possibile allocare? E&#39; possibile in qualche modo allocare più memoria?
Perché la memoria centrale (RAM) è detta memoria ad accesso casuale? E cosa significa che è una memoria volatile?
Per quale motivo all&#39;interno di un calcolatore è presente una memoria ROM, quale è la sua caratteristica principale e per cosa viene utilizzata all&#39;interno di un computer?
Come funziona la gestione dei processi? Se vengono eseguiti sequenzialmente e non in parallelo come è possibile che una CPU anche a single core possa permettere il multitasking all&#39;utente?
Cosa accade se all&#39;interno di un&#39;espressione matematica il compilatore si trova a lavorare con variabili di tipo diverso? </question_text><answer id="A2149"><answer_text>Il risultato di quell&#39;operazione non sara&#39;  quello desiderato. Ad esempio se lavorassimo con degli interi e volessimo un risultato di tipo float,dobbiamo usare l&#39;operazione detta &#34;casting&#34; ossia mettere prima dell&#39;espressione il tipo del dato desiderato tra parentesi. ( (float) a/b.. dove a e b sono interi). Senza il casting il risultato nella variabile float sara&#39;   composto da sola parte intera e senza parte decimale.</answer_text><num_votes>1</num_votes></answer><answer id="A2220"><answer_text>Se eseguo un&#39;espressione matematica tra variabili diverse il compilatore mi restituirà un &#34;warning&#34;(un&#39;avvertimento del compilatore, che però non pregiudica la compilazione vera e propria) oppure un ERRORE vero e proprio. Per effettuare operazioni tra variabili di tipo diverso dovrò ricorrere alla &#34;conversione di cast&#34;, semplicemente specificando tra parentesi il tipo di operazione che voglio effettuare(esempio: int a=1 float b=2.7 c=(float) a+b=3.7).</answer_text><num_votes>1</num_votes></answer><answer id="A2130"><answer_text>Il casting automatico assegnerà all&#39;espressione un valore del tipo che risulta essere dominante rispetto agli altri (gerarchia dei tipi di dato). Se invece il casting non è automatico, ma è stato impostato dal programmatore, il valore dell&#39;espressione verrà valutato in base ad esso (ad esempio nell&#39;espressione x=(float)2/3; il valore dell&#39;espressione verrà calcolato nell&#39;ambito dei numeri razionali anche se i due operandi sono interi).</answer_text><num_votes>1</num_votes></answer></question><question id="Q2239"><question_text>In che modo le mappe di Karnaugh possono minimizzare una funzione booleana?
Parlando di espressioni booleane, qual è il significato di contraddizione? E il significato di tautologia? 
Quali sono le principali differenze tra una DRAM (dynamic RAM) e una SRAM (static RAM)?
In quale caso l&#39;operatore logico OR restituisce 1 in un&#39;operazione di algebra booleana?E quando restituisce 0?</question_text><answer id="A2294"><answer_text>Ipotizziamo di avere due variabili A e B che per l&#39;algebra booleana possono assumere come valore  &#34;0&#34; (false) o &#34;1&#34; (true). L&#39;espressione A OR B rstituisce &#34;1&#34; nel momento in cui almeno uno dei due operatori fosse &#34;1&#34;, restituisce &#34;0&#34; se entrambi assumono  &#34;0&#34; come valore .</answer_text><num_votes>3</num_votes></answer><answer id="A2123"><answer_text>L&#39;operatore restituisce 1 (vero) quando uno dei due ingressi (o entrambi) consistono nel bit 1 (vero); l&#39;uscita e&#39; 0 (falso) quando entrambi gli ingressi consistono nel bit 0 (falso).</answer_text><num_votes>0</num_votes></answer><answer id="A2308"><answer_text>quando entrambi gli ingressi sono falsi (bit 1) l&#39; uscita Ã¨ falsa; se invece almeno uno degli ingressi Ã¨ vero (bit 0), allora l&#39;uscita Ã¨ vera (bit 0).</answer_text><num_votes>0</num_votes></answer><answer id="A2145"><answer_text>In generale, l&#39;operatore logico OR restituisce 1 quando almeno uno dei valori dell&#39;operazione è 1. Viceversa restituisce 0 quando tutti i valori dell&#39;operazione sono di valore 0.</answer_text><num_votes>1</num_votes></answer><answer id="A2106"><answer_text>L&#39;operatore logico OR (il cui simbolo, leggibile dal compilatore e&#39; ||) restituisce 1, cioe&#39; vero, se almeno uno degli operandi coinvolti nell&#39;espressione booleana vale 1, cioe&#39; risulta vero; al contrario dara&#39; 0, cioe&#39; falso, se tutti gli operandi valgono 0.</answer_text><num_votes>1</num_votes></answer></question><question id="Q2306"><question_text>Qual&#39;è la differenza tra gli interi long, short e int?
Descrivi gli elementi funzionali principali che costituiscono la macchina di von Neumann.
Cosa si intende per modalità master/slave nell&#39;ambito del funzionamento del bus di sistema?</question_text><answer id="A2164"><answer_text>Il bus di sistema è un canale che permette di collegare tra di loro tutti i componenti all&#39;interno della scheda madre di un calcolatore e le periferiche esterne ad essa, è gestito secondo una gerarchia master/slave, il master è il componente che detiene il controllo del bus quando viene eseguita una richiesta, invece lo slave è rappresentato tutte le componenti implicate nel corso della richiesta che eseguono l&#39;istruzione, quindi non detengono il controllo del bus.</answer_text><num_votes>2</num_votes></answer><answer id="A2169"><answer_text>Per modalità master/slave nell&#39;ambito del funzionamento del bus di sistema si intende la facoltà della CPU di controllare in modo unidirezionale le informazioni che viaggiano sul bus di sistema (dati, indirizzi o segnali di controllo).</answer_text><num_votes>0</num_votes></answer><answer id="A2111"><answer_text>Per modalità master/slave nell&#39;ambito del funzionamento del bus di sistema, si intende la facoltà della CPU di controllare in modo unidirezionale le informazioni che viaggiano sul bus di sistema.</answer_text><num_votes>0</num_votes></answer><answer id="A2219"><answer_text>Per modalità master/slave si indica un particolare sistema di connessione  fra dispositivi interfacciati ad un comune bus di sistema. Nella fattispecie il dispositivo che verrà indicato come master avrà la priorità esecutiva sul dispositivo indicato come slave e il funzionamento di quest&#39;ultimo dipenderà dal dispositivo master.</answer_text><num_votes>0</num_votes></answer><answer id="A2256"><answer_text>La modalitÃ  master/slave consiste in un gruppo di dispositivi o processi dei quali uno(master) possiede o assume il compito di controllare e gestire gli altri dispositivi(slaves). </answer_text><num_votes>0</num_votes></answer></question><question id="Q2210"><question_text>Quali componenti formano l&#39;architettura del calcolatore? In che modo comunicano tra loro?
Come mai viene utilizzato maggiormente lo standard ASCII piuttosto che lo standard UNICODE nella codifica dei caratteri? Quali sono i vantaggi e gli svantaggi di entrambi gli standard?
Quando è più conveniente usare il passaggio di parametri per valore rispetto al passaggio di parametri di indirizzo?
È possibile che una funzione richiami se stessa? Se si quale nome assume e quali caratteristiche deve avere?</question_text><answer id="A3261"><answer_text>Sì, assume il nome di funzione ricorsiva che per svolgere il proprio lavoro richiama sè stessa. Ad ogni richiamo la &#34;profondità&#34; dell&#39;elaborazione aumenta, finchè ad un certo punto, lo scopo viene raggiunto e la funzione ritorna. Il tipico esempio di una funzione Ricorsiva è la visualizzazione di dati in strutture gerarchiche, per esempio la visualizzazione dei file contenuti in una directory. Viene creata una funzione &#39;generica&#39; che legge una directory e visualizza ogni file. Se il file è una directory, la funzione richiama sè stessa usando directory trovata come parametro.</answer_text><num_votes>1</num_votes></answer><answer id="A3159"><answer_text>Si, nel linguaggio di programmazione C è ammessa la chiamate ricorsiva di sottoprogrammi. Nella programmazione ricorsiva viene associata un&#39;area dati non al sottoprogramma ma a ogni sua esecuzione, chiamata record di attivazione.</answer_text><num_votes>2</num_votes></answer></question><question id="Q3131"><question_text>Perché una funzione non può restituire un&#39;array, ma solo un singolo valore o un puntatore?
è possibile in un programma avere due funzioni main??
Perchè il passaggio di strutture alle funzioni conviene farlo per riferimento anzichè per copia?</question_text><answer id="A3155"><answer_text>Conviene da un punto di vista dell&#39;allocazione della memoria. Se per riferimento mi basta un puntatore cioè un occupazione di memoria di 1 byte, mentre per copia spreco un numero di byte pari al numero di byte occupato dalla struttura. Questo incide anche sulla velocità nell&#39;esecuzione del programma.</answer_text><num_votes>1</num_votes></answer><answer id="A3234"><answer_text>Nel passaggio per riferimento viene passato alla funzione un puntatore alla struttura (o più in generale ad una variabile). Se la funzione modifica la struttura queste modifiche sono permanenti cosa che non accade passando la struttura per copia. Infatti in questo caso alla funzione viene passata una copia della struttura e le modifiche che vengono fatte a tale copia non si ripresentano nella struttura originale e vanno perse al termine della funzione, a meno che la struttura non venga ritornata dalla funzione. </answer_text><num_votes>2</num_votes></answer><answer id="A3216"><answer_text>il passaggio di una variabile qualsiasi (strutturata o meno) ad una funzione implica sempre la copia di questa variabile. Quindi, soprattutto nel caso di variabili strutturate, conviene passare la variabile per riferimento invece che per indirizzo poichè in questo modo viene copiato solo l&#39;indirizzo della variabile e non tutto il suo valore, con conseguente risparmio di memoria.</answer_text><num_votes>2</num_votes></answer><answer id="A3215"><answer_text>il passaggio di una variabile qualsiasi (strutturata o meno) ad una funzione implica sempre la copia di questa variabile. Quindi, soprattutto nel caso di variabili strutturate, conviene passare la variabile per riferimento invece che per indirizzo poichè in questo modo viene copiato solo l&#39;indirizzo della variabile e non tutto il suo valore, con conseguente risparmio di memoria.</answer_text><num_votes>1</num_votes></answer></question><question id="Q3146"><question_text>Cosa sono le variabili globali e come possono essere utilizzate? Quali side-effects si possono generare?
Dare una definizione di funzione (nel campo informatico), soffermarsi in particolare sulla sintassi della testata e del corpo.
A cosa serve il tipo di dato void?
Che cosa permettono di fare i sottoprogrammi e quali vantaggi portano alla programmazione? 
Quali sono i 3 casi della complessità dell&#39; input e spiegane il funzionamento.
E&#39; possibile passare un vettore o una matrice ad una funzione? Se sì, come?
Da cosa è composta la definizione di funzione? Da cosa è costituito il corpo?
Spiega brevemente i due tipi di passaggio di variabili alle funzioni: il passaggio deio parametri per valore (o copia) e quello per indirizzo
Quali sono le caratteristiche delle funzioni ricorsive?</question_text><answer id="A3130"><answer_text>Una funzione è ricorsiva quando al suo interno c&#39;è un invocazione a se stessa. Le funzioni ricorsive vengono impiegate quando è necessario compiere una serie di operazioni tutte identiche fra di loro.</answer_text><num_votes>1</num_votes></answer><answer id="A3239"><answer_text>Le caratteristiche delle funzioni ricorsive sono principalmente le seguenti: la presenza di uno o piu&#39; casi base, nei quali il risultato puo&#39; essere determinato direttamente; la presenza di uno o piu&#39; casi complessi, detti ricorsivi, che individuano il risultato della funzione in un valore piu&#39; piccolo e piu&#39; semplice risultante dall&#39;esecuzione della funzione stessa.</answer_text><num_votes>2</num_votes></answer></question><question id="Q3153"><question_text>Che differenza c&#39;è fra passaggio di parametri per valore e passaggio di parametri per indirizzo? 
Come faccio ad impedire ad una funzione di modificare un parametro passato per riferimento? 
cosa contiene la testata (o &#34;header&#34;) di una funzione?</question_text><answer id="A3140"><answer_text>La testata o &#34;header&#34;, che e&#39; una parte della definizione di una funzione, contiene le informazioni piu&#39; rilevanti per l&#39;uso corretto di una funzione. La testata e&#39; costituita da:1-tipo di risultato (che costituisce il codominio della funzione); 2-dall&#39;identificatore del sottoprogramma; 3-dalla lista dei parametri cui la funzione viene applicata con il relativo tipo (la lista dei parametri costituisce il dominio della funzione). Un esempio di testata e&#39;: int casa( int base, int x) dove il primo int= tipo parametro di ritorno; casa=identificatore funzione e ( int base, int x)=parametri formali.</answer_text><num_votes>4</num_votes></answer><answer id="A3132"><answer_text>La testata di una funzione contiene contiene il tipo di dato che la funzione deve  ritornare (void, int, float...), il nome della funzione, e tra parentesi i parametri formali ovvero i valori che utilizzerà la funzione. L&#39;header andrá poi scritto prima del main o nel file .h</answer_text><num_votes>0</num_votes></answer></question><question id="Q3256"><question_text>L&#39;utilizzo di una funzione porta ad una consistente diminuzione dell&#39;allocazione di memoria?
Per quale motivo due variabili interne a due funzioni diverse contenute nello stesso programma possono avere lo stesso nome?
Quale è la differenza tra variabili globali e variabili locali?</question_text><answer id="A3162"><answer_text>Le variabili globali si dichiarano fuori dalle funzioni compresa la funzione &#39;main&#39;, per questo vengono viste e possono essere richiamate da tutte loro. Le variabili locali, invece, sono dichiarate all&#39;interno delle funzioni: Esse nascono quando si accede alla funzione si distruggono all&#39;uscita. Generalmente nella programmazione si tende a usare poche variabili globali in quanto si può incorrere facilmente in errori.</answer_text><num_votes>3</num_votes></answer><answer id="A3148"><answer_text>Le variabili globali possono essere usate per tutta la durata del programma, vengono allocate in fase di compilazione e sono dichiarate fuori dal main (subito dopo le librerie). Esse quindi sono viste da tutte le parti del programma, cioè sia dal main che dalle varie funzioni. Queste possono causare uno spreco di memoria a differenza delle variabili locali che vengono viste solo dalla parte di codice in cui sono inserite e sono delimitate dagli operatori { e }. Questo permette di liberare la memoria  e quindi non farla saturare. </answer_text><num_votes>0</num_votes></answer><answer id="A3149"><answer_text>Le variabili globali possono essere usate per tutta la durata del programma, vengono allocate in fase di compilazione e sono dichiarate fuori dal main (subito dopo le librerie). Esse quindi sono viste da tutte le parti del programma, cioè sia dal main che dalle varie funzioni. Queste possono causare uno spreco di memoria a differenza delle variabili locali che vengono viste solo dalla parte di codice in cui sono inserite e sono delimitate dagli operatori { e }. Questo permette di liberare la memoria  e quindi non farla saturare. </answer_text><num_votes>2</num_votes></answer></question><question id="Q3192"><question_text>in che modo viene passato un matrice ad una funzione? e perchè?
è possibile implementare una funzione senza per forza dichiarare anche l&#39;Header? se si in quali problemi potremmo incorrere? fare un esempio in cui senza la dichiarazione preventiva degli header delle funzioni non è possibile dichiarare le stesse.
Nelle funzioni cosa implica la parola chiave &#34;const&#34;? In che casi è opportuno utilizzarla?
Come si calcola la complessità della funzione ricorsiva e di quella non ricorsiva?
Che differenze ci sono tra il main e una funzione?
Che differenza c&#39;è tra i parametri formali ed i parametri attuali di una funzione?
Da cosa è composta la definizione di funzione? Elenca e spiega le 2 componenti.</question_text><answer id="A3138"><answer_text>La definizione di funzione è composta da una testata e da un corpo. La testata, chiamata anche header, contiene le informazioni principali per un corretto funzionamento della funzione. In essa si definiscono il dominio, il codominio (utilizzando parametri formali) e il nome della funzione. Il corpo (body) invece è costituito da un blocco di istruzioni (cicli, istruzioni condizionali, struct o qualsiasi altro tipo di comando) che implementano effettivamente il compito che la funzione deve svolgere.</answer_text><num_votes>2</num_votes></answer><answer id="A3226"><answer_text>La definizione di funzione si avvale di due nozioni: quella di testata (o header) e quella di corpo (o body). L&#39;header della funzione contiene: il tipo del risultato o &#34;codominio&#34; (es. int, float, ecc...), l&#39;identificatore del sottoprogramma (nome per &#34;chiamare&#34; la funzione) e la dichiarazione degli argomenti o &#34;dominio&#34; (es. int x, int y...). Il corpo della funzione è composto da: la parte dichiarativa locale (contiene le variabili necessarie all&#39;esecuzione) e la parte programmatica (contiene le istruzioni per l&#39;esecuzione della funzione, es. cicli for, while e tutte le altre operazioni).</answer_text><num_votes>3</num_votes></answer></question><question id="Q3171"><question_text>Cosa si intende per record di attivazione di una funzione? Cosa contiene e a cosa serve?
Cos&#39;è una variabile automatica e come può essere implementata (scrivere un esempio di codice)?
Che cosa si intende per effetti collaterali (side effects) nell&#39;ambito delle funzioni e quando possono avvenire?
Quando ha senso che una funzione ritorni un tipo di dato &#34;void&#34;?
è possibile che una funzione restituisca un array? nel caso in cui non fosse possibile esiste una soluzione per poterlo fare?
Il parametro della funzione che sta nel main deve essere per forza uguale al parametro della definizione della  funzione stessa ?
Di cosa si parla, quando si usa una funzione INLINE????	
Cosa si intende per &#34;macchina dedicata&#34;, come e quando viene realizzata?
Qual&#39;è la differenza tra variabili &#34;statiche&#34; , variabili &#34;dinamiche&#34; , e variabili &#34;automatiche&#34;?
Quali sono i vantaggi che si possono avere strutturando un progetto in tre diversi file : il &#34;.h&#34; il &#34;main&#34; e il &#34;.cpp&#34;?
In C si possono definire due tipi di sottoprogrammi: funzioni e procedure. Quali sono le differenze tra i due?
Perchè è consigliabile definire in modo separato header e body delle funzioni?
Quando si dichiara una funzione viene allocata una macchina nella memoria, che ha il compito di svolgere le operazioni richieste dalla funzione. Esiste però una parte di memoria esterna a tutte queste macchine chiamata ambiente globale: che cosa contiene? Cosa succede se viene modificata?
Qual&#39;è la differenza fra Testata (Head) della funzione e Corpo (Body)? In un programma suddiviso in più file (es: main.cpp, funzioni.h, funzioni.cpp), dove va collocata la Testata e dove il Corpo?
Cosa si intende con ricorsione diretta e indiretta?</question_text><answer id="A3351"><answer_text>Una funzione ricorsiva è una funzione che richiama sé stessa (ricorsione diretta) o richiama una funzione che a sua volta la richiama (ricorsione indiretta). </answer_text><num_votes>1</num_votes></answer><answer id="A3339"><answer_text>Una funzione ricorsiva è una funzione che richiama sé stessa (ricorsione diretta) o richiama una funzione che a sua volta la richiama (ricorsione indiretta). </answer_text><num_votes>0</num_votes></answer><answer id="A3352"><answer_text>Una funzione ricorsiva è una funzione che richiama sé stessa (ricorsione diretta) o richiama una funzione che a sua volta la richiama (ricorsione indiretta). </answer_text><num_votes>0</num_votes></answer><answer id="A3353"><answer_text>Una funzione ricorsiva è una funzione che richiama sé stessa (ricorsione diretta) o richiama una funzione che a sua volta la richiama (ricorsione indiretta). </answer_text><num_votes>0</num_votes></answer><answer id="A3345"><answer_text>Una funzione ricorsiva è una funzione che richiama sé stessa (ricorsione diretta) o richiama una funzione che a sua volta la richiama (ricorsione indiretta). </answer_text><num_votes>1</num_votes></answer><answer id="A3338"><answer_text>Una funzione ricorsiva è una funzione che richiama sé stessa (ricorsione diretta) o richiama una funzione che a sua volta la richiama (ricorsione indiretta). </answer_text><num_votes>0</num_votes></answer><answer id="A3344"><answer_text>Una funzione ricorsiva è una funzione che richiama sé stessa (ricorsione diretta) o richiama una funzione che a sua volta la richiama (ricorsione indiretta). </answer_text><num_votes>0</num_votes></answer><answer id="A3346"><answer_text>Una funzione ricorsiva è una funzione che richiama sé stessa (ricorsione diretta) o richiama una funzione che a sua volta la richiama (ricorsione indiretta). </answer_text><num_votes>0</num_votes></answer><answer id="A3341"><answer_text>Una funzione ricorsiva è una funzione che richiama sé stessa (ricorsione diretta) o richiama una funzione che a sua volta la richiama (ricorsione indiretta). </answer_text><num_votes>0</num_votes></answer><answer id="A3350"><answer_text>Una funzione ricorsiva è una funzione che richiama sé stessa (ricorsione diretta) o richiama una funzione che a sua volta la richiama (ricorsione indiretta). </answer_text><num_votes>0</num_votes></answer><answer id="A3347"><answer_text>Una funzione ricorsiva è una funzione che richiama sé stessa (ricorsione diretta) o richiama una funzione che a sua volta la richiama (ricorsione indiretta). </answer_text><num_votes>0</num_votes></answer><answer id="A3348"><answer_text>Una funzione ricorsiva è una funzione che richiama sé stessa (ricorsione diretta) o richiama una funzione che a sua volta la richiama (ricorsione indiretta). </answer_text><num_votes>0</num_votes></answer><answer id="A3349"><answer_text>Una funzione ricorsiva è una funzione che richiama sé stessa (ricorsione diretta) o richiama una funzione che a sua volta la richiama (ricorsione indiretta). </answer_text><num_votes>0</num_votes></answer><answer id="A3340"><answer_text>Una funzione ricorsiva è una funzione che richiama sé stessa (ricorsione diretta) o richiama una funzione che a sua volta la richiama (ricorsione indiretta). </answer_text><num_votes>0</num_votes></answer><answer id="A3354"><answer_text>Una funzione ricorsiva è una funzione che richiama sé stessa (ricorsione diretta) o richiama una funzione che a sua volta la richiama (ricorsione indiretta). </answer_text><num_votes>0</num_votes></answer><answer id="A3343"><answer_text>Una funzione ricorsiva è una funzione che richiama sé stessa (ricorsione diretta) o richiama una funzione che a sua volta la richiama (ricorsione indiretta). </answer_text><num_votes>2</num_votes></answer><answer id="A3342"><answer_text>Una funzione ricorsiva è una funzione che richiama sé stessa (ricorsione diretta) o richiama una funzione che a sua volta la richiama (ricorsione indiretta). </answer_text><num_votes>0</num_votes></answer></question><question id="Q3336"><question_text>che cosa si intende per stream? di quali tipi può essere? 
che ruolo ha il sistema operativo nella gestione file mediante il linguaggio c/c++?
Dal punto di vista dell&#39;utilizzo delle risorse di sistema, è meglio utilizzare un algoritmo iterativo o ricorsivo? Perchè?
Quali sono le principali operazioni usabili su un tipo FILE?
Quali sono le principali caratteristiche di un algoritmo ricorsivo e quali sono i vantaggi/svantaggio rispetto ad una programmazione non ricorsiva?
Cosa contiene il tipo strutturato FILE?
l&#39;accesso in modalità binaria porta dei vantaggi o svantaggi in confronto alla modalità testo? come mai?
Quali sono i vantaggi/svantaggi di gestire un file in modalità testo rispetto ad uno in modalità binaria?</question_text><answer id="A3356"><answer_text>In un file di tipo testo si ha la codifica dei dati tramite una sequenza di caratteri, dove generalmente non è garantita la corrispondenza tra file scritti o letti e quelli in memorizzati nella periferica. Un file di tipo binario, invece, è formato da una sequenza di bytes, i quali corrispondono uno ad uno con la periferica. All&#39;interno non c&#39;è una vera e propria traduzione dell&#39;informazione in quanto i numeri di byte letti o scritti sono gli stessi memorizzati nella periferica. Quindi è più vantaggioso gestire un file binario rispetto ad uno di tipo testo perchè ha un lettura più rapida.</answer_text><num_votes>2</num_votes></answer><answer id="A3325"><answer_text>Con i file binari si ha una corrispondenza 1 a 1 garantita per la sequenza di byte, cosa che non si ottiene con i file testo, inoltre non occorre fare nessuna traduzione.</answer_text><num_votes>0</num_votes></answer></question><question id="Q3340"><question_text>Elencare e descrivere i tre passi che caratterizzano l&#39;algoritmo di ordinamento &#34;merge sort&#34;. 
Tra le operazioni di gestione dei file ve ne sono due molto importanti che sono &#34;r&#34;(lettura modalità testo) e &#34;rb&#34;(lettura modalità binario). Qual è la differenza tra queste due modalità?
In che caso è meglio usare una funzione ricorsiva rispetto ad una non ricorsiva?
Qual&#39;è l&#39;utilità di accedere ad un file un maniera casuale?
Cosa può succedere ad un file quando un programma termina inaspettatamente (crash)?</question_text><answer id="A3286"><answer_text>Quando apriamo un file, per far sì che il flusso di dati che vogliamo inserirci venga scritto,è  necessario chiuderlo o tramite un apposito comando &#34;fclose()&#34; oppure in automatico al termine del programma stesso(fine del main o exit).Se il programma per qualche motivo dovesse interrompersi inaspettatamente il file non verrebbe chiuso e il flusso di dati non è detto verrebbe scritto al suo interno e di conseguenza potremmo avere perdita di dati.</answer_text><num_votes>2</num_votes></answer><answer id="A3290"><answer_text>Quando il programma termina inaspettatamente non viene eseguita l&#39;operazione di &#34;fclose&#34;, che salva nel file i dati presenti nel buffer e termina l&#39;associazione tra il flusso di dati e la periferica, quindi i dati rimasti nel buffer vanno persi; possono comunque verificarsi anche altri effetti collaterali o addirittura la perdita del file.</answer_text><num_votes>4</num_votes></answer></question><question id="Q3431"><question_text>L&#39;utilizzo della ricorsione richiede un uso maggiore di risorse di computazione o di memoria? Perché?
Qual è la differenza tra una ricorsione di tipo diretto e una di tipo indiretto?
In che modo utilizza la memoria, una funzione che lavora in modalità ricorsiva ?</question_text><answer id="A3383"><answer_text>Una funzione ricorsiva crea una nuovo zona di memoria ad esempio ogni volta che la funzione richiama se stessa </answer_text><num_votes>0</num_votes></answer><answer id="A3314"><answer_text>una funzione ricorsiva gestisce la memoria in maniera dinamica, e più propriamente &#34;costruendo&#34; una pila di dati: ovvero la funzione, partendo da un caso complesso, calcola un primo risultato parziale e lo parcheggia nella memoria per risolvere il problema che ora sarà un pò più semplice... e cosi via fino al caso base di cui la funzione riesce a trovare la soluzione ed utilizzarla per risolvere le &#34;soluzioni parziali&#34; fino ad allora ottenute. </answer_text><num_votes>3</num_votes></answer></question><question id="Q3360"><question_text>Aprendo dei file e dimenticando di chiuderli, cosa succede quando il programma termina (due casi)?
Cosa istanzia il sistema operativo quando viene istanziato un file? E cosa fa&#39; lo stesso sistema operativo quando invece chiudiamo il file?
Cosa si intende per accesso random? Per cosa si distingue da quello sequenziale?
A cosa serve aprire in modalità binaria in lettura/scrittura un file?
che differenza c&#39;è tra un file normale e un file binario?
e&#39; possibile eseguire la lettura di dati in modalità binaria da un file scritto non in modalità binaria? cosa succede?
A che cosa serve la funzione fopen(), come deve essere utilizzata? Quali sono le modalità che &#34;supporta&#34;?
Quali sono le principali differenze tra le funzioni fscanf e fgets? Quando è meglio usare una o l&#39;altra?</question_text><answer id="A3327"><answer_text>Fscanf e Fgets sono entrambe funzioni di lettura di dati. La prima legge i dati in input fino ad uno spazio bianco, mentre la seconda legge fino ad un invio a capo. Inoltre fgets salva i dati letti in un array inserendo un NULL come ultima cella dell&#39;array, fscanf invece legge solo in basa alla formattazione data all&#39;inizio. Se si è sicuri di ciò che si avrà nell&#39;input allora è conveniente usare fscanf, ma essendo essa molto instabile (Manda il programma in overflow se il dato in input è di un formato diverso da quello aspettato) spesso conviene usare fgets poiché causa meno errori.</answer_text><num_votes>4</num_votes></answer><answer id="A3402"><answer_text>La funzione fscanf funziona esattamente come la scanf, ma opera su file; restituisce il numero di campi letti con successo e, in caso di errore, 0 o EOF. La funzione fgets necessita, oltre che della specifica della stringa dove depositare la riga letta, della quantità massima di caratteri da leggere e del canale attraverso il quale effettuare la lettura; la funzione legge dal file fino al numero di caratteri specificato o al newline, se questo viene incontrato prima. Non si può infatti conoscere l?esatta lunghezza del dato contenuto nel campo e così si utilizza il newline come delimitatore.</answer_text><num_votes>0</num_votes></answer></question><question id="Q3304"><question_text>quale è la dimostrazione utilizzata per il calcolo del tempo di convergenza dell&#39;algoritmo merge sort?
Qual&#39;è la differenza tra printf e fprintf?</question_text><answer id="A3292"><answer_text>La funzione printf viene utilizzata per visualizzare sullo standard output una stringa costruita in base ad un formato specificato. La fprintf è una funzione derivata dalla printf che permette la scrittura dell&#39;output su file.</answer_text><num_votes>2</num_votes></answer><answer id="A3276"><answer_text>Sono entrambe una funzioni contenute nella libreria &#34;stdio.h&#34;. printf() permette di stampare (visualizzare) a video, in una &#34;console application&#34;, ciò che viene passato come parametro, fprintf() permette invece la scrittura (inserimento) in un file di ciò che viene passato come parametro. A differenza della funzione printf(), fprintf() richiede, oltre alle informazioni da stampare, anche il puntatore al file di destinazione.</answer_text><num_votes>1</num_votes></answer><answer id="A3275"><answer_text>Sono entrambe una funzioni contenute nella libreria &#34;stdio.h&#34;. printf() permette di stampare (visualizzare) a video, in una &#34;console application&#34;, ciò che viene passato come parametro, fprintf() permette invece la scrittura (inserimento) in un file di ciò che viene passato come parametro. A differenza della funzione printf(), fprintf() richiede, oltre alle informazioni da stampare, anche il puntatore al file di destinazione.</answer_text><num_votes>1</num_votes></answer><answer id="A3274"><answer_text>printf() è una funzione contenuta nella libreria &#34;stdio.h&#34; che permette di stampare (visualizzare) a video (in una &#34;console application&#34;) ciò che viene passato come parametro, fprintf() è invece una funzione che permette la scrittura (inserimento) in un file di ciò che viene passato come parametro. A differenza della funzione printf(), fprintf() richiede, oltre alle informazioni da stampare, anche il puntatore al file di destinazione.</answer_text><num_votes>0</num_votes></answer></question><question id="Q3391"><question_text>Cos&#39;e&#39; un algoritmo ricorsivo? Quali sono le differenze tra algoritmo ricorsivo e algoritmo iterativo?
Che differenza c&#39;è tra fputs() e fputc()? Come operano le due funzioni? Cosa ricevono in input e cosa danno in output? Cosa indica la f?
Come si possono definire il caso base e il caso induttivo? Come si risolve il caso induttivo?
Qual&#39;è l&#39;utilizzo del flag EOF nella gestione degli errori all&#39;interno del tipo strutturato FILE?
Qual&#39;è il ruolo del buffer di sistema nel processo di scrittura di un file?</question_text><answer id="A3365"><answer_text>Confrontate con la memoria centrale, le unità di memoria di massa richiedono tempi di accesso e scrittura molto elevati. Il ruolo del buffer di sistema (area della memoria centrale in cui viene memorizzato lo stream di dati prima di essere scritto sul file) è quello di rendere più veloce l&#39;esecuzione di un programma in cui è richiesta la scrittura su file . Una volta completata la scritture il buffer si svuota.  </answer_text><num_votes>1</num_votes></answer><answer id="A3392"><answer_text>Il buffer di sistema serve a memorizzare in modo temporaneo i file in scrittura così che poi questi possano essere manipolati.</answer_text><num_votes>1</num_votes></answer><answer id="A3419"><answer_text>Quando faccio un&#39;operazione di scrittura su file scrivo i dati contenuti nel buffer indicato dal nome del file su cui sto lavorando</answer_text><num_votes>0</num_votes></answer><answer id="A3382"><answer_text>Il buffer contiene i dati che verranno poi salvati con il comando fclose nel file precedentemente dichiarato. Infatti uno dei danni provocati dal non utilizzo del comando fclose è quello della perdita dei dati. Molto importante quindi usarlo.</answer_text><num_votes>1</num_votes></answer></question><question id="Q3357"><question_text>Quali sono i flussi in C e quali sono le loro caratteristiche?
Spiegare la differenza tra stream e file e descrivere in che modo vengono utilizzati nell&#39;ambito della programmazione, fare degli esempi del loro utilizzo.</question_text><answer id="A3283"><answer_text>Con stream si intende l&#39;interfaccia, il flusso di comunicazione attraverso cui l&#39;utente opera la gestione del file, che è invece un contenitore di informazioni memorizzate sulla periferica hardware e a cui si ha accesso attraverso lo stream. Ad esempio un file può essere associato ad uno stream mediante il comando &#34;open&#34;; in questo modo ha origine uno scambio di dati tra il programma utente ed il file. </answer_text><num_votes>0</num_votes></answer><answer id="A3370"><answer_text>In C gli stream sono delle astrazioni rappresentative di un file o di un dispositivo fisico, che vengono manipolate attraverso l&#39;uso di puntatori. I file sono contenitori di informazioni che sono associati alle periferiche(es.hard disk) e gestiti dal sistema operativo; ciascuna periferica di I/O e&#39; rappresentata da un file cosicche&#39; l&#39;accesso ad esse viene visto come accesso a files. Un file viene associato ad uno stream con un&#39;operazione di &#39;open&#39;, dopo la quale i dati possono essere scambiati tra il programma utente e il file; un file si dissocia da uno stream con l&#39;operazione di &#39;chiusura&#39;.</answer_text><num_votes>0</num_votes></answer><answer id="A3406"><answer_text>Gli streams (o flussi) sono quelle astrazioni fornite a livello di linguaggio di programmazione per la gestione I/O indipendente della periferica. Permettono di accedere ai file in maniera simile e si comportano tutti alla stessa maniera, ovvero le operazioni che operano su di essi sono le stesse per tutti. I file sono invece dei contenitori di informazioni associati a periferiche e gestiti dal Sistema Operativo. Il file può essere associato ad uno stream mediante un&#39;operazione di &#34;open&#34;. Una volta eseguita questa operazione i dati possono essere scambiati tra il programma utente ed il file.</answer_text><num_votes>1</num_votes></answer></question><question id="Q3305"><question_text>cos&#39;è una variabile di tipo FILE?
una funzione ricorsiva può essere sempre scritta in modo non ricorsivo o ci sono dei limiti?
Come sono definite le funzioni fwrite() e fread() e a cosa servono?
Nell&#39;ambito della gestione dei file cosa fanno e come si usano le funzione remove e rename?
Quali sono e che funzione hanno i flussi che vengono aperti al momento dell&#39; esecuzione di un programma?
Quali sono le operazioni per la gestione di una variabile di tipo FILE? elencali e descrivili.
Se noi sappiamo che p e q sono due variabili di tipo puntatore che puntano a due elementi di un array diversi tra loro, l&#39;istruzione p-q cosa restituisce?
nell&#39; utilizzo dei puntatori cosa vuol dire incorrere nel rischio di aliasing?
Qualit tipi di operazioni è possibile fare nell&#39;ambito dei puntatori???
Quali usi (nei puntatori e non) può avere il carattere &#39;*&#39;? 
Cos&#39;è la &#34;dot notation&#34;? Come si utilizza?</question_text><answer id="A3120"><answer_text>La &#34;dot notation&#34; è uno schema sintattico tipico del linguaggio C e viene utilizzata attraverso l&#39;uso di un punto per accedere al contenuto di memoria denotato da un certo oggetto.</answer_text><num_votes>2</num_votes></answer><answer id="A3045"><answer_text>La dot notation si usa in C per accedere a singoli campi di una struttura: si scrive l&#39;identificatore della struttura seguito da un punto e dall&#39;identificatore del campo desiderato.</answer_text><num_votes>1</num_votes></answer><answer id="A3044"><answer_text>La dot notation si usa in C per accedere a singoli campi di una struttura: si scrive l&#39;identificatore della struttura seguito da un punto e dall&#39;identificatore del campo desiderato.</answer_text><num_votes>0</num_votes></answer></question><question id="Q3049"><question_text>Nel linguaggio C/C++ il simbolo [*] rappresenta tre cose distinte. Illustrare il suo utilizzo fornendo alcuni esempi di codice per ogni funzione svolta.
Quali sono le istuzioni che consentono di fare delle strutture di controllo? E quali sono definite complete secondo il teorema di Boehm Jacopini?
Spiegare la differenza tra ciclo &#34;while&#34;, &#34;do-while&#34; e &#34;for&#34;. In quali casi sono preferibili utilizzarli e perchè?
In che cosa il costrutto &#34;switch&#34; è diverso dal costrutto &#34;if&#34;?
In che cosa consiste typedef? Quale e&#39; il suo significato? Quando e&#39; utilizzato?
A cosa serve l&#39;operatore &#34;freccetta&#34; (-&#62;) nell&#39;ambito dei puntatori?
A che cosa serve l&#39;operatore sizeof() e che tipo di dato restituisce?</question_text><answer id="A3040"><answer_text>L?operatore sizeof produce il numero di byte occupati da ciascun elemento di un array o da un array nel suo complesso. restituisce un integer</answer_text><num_votes>0</num_votes></answer><answer id="A3016"><answer_text>L&#39;operatore sizeof() restituisce un numero di tipo int, il dato che restituisce e&#39; il numero di byte occupati in memoria dal tipo di variabile inserito come argomento della funzione sizeof().</answer_text><num_votes>1</num_votes></answer><answer id="A3017"><answer_text>L&#39;operatore sizeof() restituisce un numero di tipo int, il dato che restituisce e&#39; il numero di byte occupati in memoria dal tipo di variabile inserito come argomento della funzione sizeof().</answer_text><num_votes>1</num_votes></answer></question><question id="Q3013"><question_text>Qual&#39;è l&#39;utilità dei puntatori? Spiegare come si può accedere al contenuto di una variabile tramite un puntatore ad essa e come ottenere l&#39;indirizzo di memoria della suddetta variabile.
A cosa serve passare l&#39;indirizzo di una variabile anziché il valore della stessa ad una funzione?
che tipo di assegnamento è fattibile sui puntatori?
Si potrebbe dire che una variabile di tipo array è un puntatore? E&#39; possibile accedere alle celle di memoria di un array o di una matrice utilizzando gli operatori di dereferenziazione invece che le parentesi quadre? Come?
Spiegare la differenza tra puntatore e doppio puntatore e fare degli esempi pratici sul loro utilizzo e su operazioni che si possono applicare tra loro. 
Nella dichiarazione di un puntatore &#34;TipoDato *Puntatore&#34;, che cosa sono Tipodato,* e Puntatore? 
Le scritture *P=x; x=*P; x*=P; sono equivalenti? Nel caso in cui risultassero differenti, descriverne le caratteristiche.
Perché quando passiamo ad una funzione una variabile per riferimento dobbiamo fare più attenzione nell&#39;implementazione del codice della suddetta funzione?elenca almeno un vantaggio e uno svantaggio rispetto al passaggio per valore.
In che cosa consiste l&#39;operazione di dereferenziazione?
Può essere effettuato un&#39;assegnamento tra un puntatore e una variabile?
In quali casi risulta utile utilizzare in un algoritmo un ciclo?
Quali vantaggi/svantaggi comporta l&#39;allocazione dinamica della memoria? Come si effettua l&#39;allocazione dinamica della memoria in C?
Una funzione può restituire un array come risultato? Se no, perché? Se si, come?
Cosa succede se si dimentica uno o più &#34;break&#34; in un costrutto &#34;switch&#34;?
In quale memoria vengono memorizzati i puntatori e perché ?
Perchè quando si dichiara un puntatore bisogna indicare anche il tipo di dato puntato?
In C si possono eseguire operazioni di somma su un puntatore? Se sì, in che modo?
Cosa significa dereferenziare un puntatore?
Come si effettua un&#39;operazione di assegnamento ad una variabile di tipo puntatore?
cosa succede in memoria quando si utilizza un doppio puntatore?
Quali vantaggi e quali svantaggi comporta l&#39;utilizzo di un puntatore per scorrere i caratteri di una stringa?
Quali sono gli errori che si possono fare durante l&#39;utilizzo dei puntatori creando così degli &#34;effetti collaterali&#34; (side effects)?
che cos&#39;è l&#39;overflow? quando si manifesta?</question_text><answer id="A2776"><answer_text>l&#39;overflow si manifesta quando cerchiamo di occupare più spazio di quello disponibile nell&#39;allocazione di memoria in cui stiamo scrivendo i nostri dati. Si manifesta soprattutto nella gestione degli array poichè, per quanto visto fin&#39;ora, la grandezza degli array è statica una volta dichiarata; ciò presuppone che il programmatore conosca esattamente quale sarà la funzione di quell&#39;array. In caso contrario, potremmo trovarci di fronte ad un array troppo piccolo andando cosi incontro all&#39;errore di overflow</answer_text><num_votes>0</num_votes></answer><answer id="A2866"><answer_text>E&#39; un errore dovuto alla memorizzazione di dati in uno spazio insufficiente a contenerli. Ciò causa la memorizzazione sbagliata dei dati. Per esempio se si usa una codifica a 6 bit, dove il bit più significativo indica il segno, e si fa la somma tra 011010 e 011111, risulta 111001 dove il primo 1 viene letto come segno anziché come 1*2^5, quindi il risultato è un numero diverso in modulo e anche in segno. </answer_text><num_votes>1</num_votes></answer><answer id="A2823"><answer_text>La traduzione esatta è &#34;traboccamento&#34; e si manifesta quando, effettuando delle operazioni aritmetiche, il risultato è troppo grande per essere memorizzato e supera lo spazio che il programmatore aveva messo a disposizione per il risultato stesso.</answer_text><num_votes>2</num_votes></answer><answer id="A2810"><answer_text>L&#39;overflow si verifica quando il risultato di un&#39;operazione supera il numero massimo rappresentabile dal calcolatore. Ad esempio se ho un dato a di 8 bit che vale 255 (11111111) , facendo a+1 il risultato non potrà essere 256 (100000000) perché servono 9 bit per rappresentarlo. In quel caso solitamente il calcolatore tiene gli ultimi 8 bit quindi 255+1 = 0</answer_text><num_votes>1</num_votes></answer></question><question id="Q2914"><question_text>Cosa si intende per tipo di dato astratto e perché si differenzia dagli altri?
Descrivere l&#39;utilità e il funzionamento della codifica complemento a 2 (CA2).</question_text><answer id="A2914"><answer_text>Il complemento a 2 è il complemento più utilizzato e più semplice per rappresentare numeri binari sia positivi che negativi. Questo è possibile poichè l&#39;informazione del segno stesso è inclusa nei bit del numero e per questo motivo basta solo l&#39;operatore &#34;addizione&#34; per effettuare sia le operazioni di addizione che quelle di sottrazione. Per ottenere un numero rappresentato in CA2, basta leggere il numero da destra verso sinistra e invertire tutte le cifre a partire dal primo bit uguale a 1 (escluso).</answer_text><num_votes>3</num_votes></answer><answer id="A2907"><answer_text>il complemento a due è un sistema di conversione molto utilizzato in abito elettronico, infatti ha il vantaggio di eliminare la risonanza dello zero ( elimina gli zeri multipli nelle diverse rappresentazioni di un numero binario). , La codifica in complemento a due è infine largamente utilizzata in elettronica poichè molti circuiti sommatori utilizzano questa conversione per operare in modo più rapido ( ad esempio l&#39;ALU)</answer_text><num_votes>0</num_votes></answer><answer id="A2846"><answer_text>È il metodo più diffuso per la rappresentazione dei numeri con segno in informatica. La sua enorme diffusione è data dal fatto che i circuiti di addizione e sottrazione non devono esaminare il segno di un numero rappresentato con questo sistema per determinare quale delle due operazioni sia necessaria, permettendo tecnologie più semplici e maggiore precisione. Il bit iniziale del numero ha peso negativo (1) o positivo (0). Prendendo il complementare e aggiungendo 1 al numero binario risultante si può così ottenere il valore assoluto di un numero binario negativo.</answer_text><num_votes>1</num_votes></answer></question><question id="Q2825"><question_text>Che differenza c&#39;è tra il costrutto typedef e struct?
A cosa serve il costrutto &#34;Typedef&#34; e dove si colloca nel programma?
qual&#39;è l&#39;algoritmo di conversione da un numero binario a uno decimale?
Perchè è importante definire un numero EPSILON piccolo a piacere quando bisogna confrontare valori di tipo float?
Dopo aver spiegato la differenza tra la rappresentazione di numeri interi &#34;in modulo e segno&#34; e quella &#34;in complemento&#34;, descrivere la procedura utilizzata per rappresentare i numeri interi in CA2 e illustrarne i vantaggi e/o gli svantaggi rispetto ad un&#39;altra rappresentazione.
La codifica ASCII non comprende le lettere accentate. Cosa è necessario fare per utilizzare una codifica differente dalla ASCII, se possibile? Qual&#39;è la codifica necessaria per visualizzare ed utilizzare lettere accentate?  
Specificare quante rappresentazioni in complemento vi sono e quali sono. Inoltre spiegare il funzionamento della rappresentazione in complemento a due ed elencare i motivi per cui la utilizziamo.
come posso passare un array per riferimento ad una funzione ? quale è l&#39;intestazione corretta?
Perchè gli interi positivi al calcolatore non possono avere un numero molto grande(tendente a infinito)? Qual è il valore massimo? Come viene espresso?
come funziona la conversione da binario a decimale e viceversa?
Cosa si ottiene in output eseguendo operazioni aritmetiche (+,-,*,/) su due dati di tipo char ?</question_text><answer id="A2919"><answer_text>Il risultato sarà un valore di tipo int risultante dall&#39;operazione desiderata , per esempi A-a=|40| che nella tabella ascii è il valore che separa i due caratteri , negli altri casi sarà la risultante delle operazioni. </answer_text><num_votes>0</num_votes></answer><answer id="A2773"><answer_text>le operazione aritmetiche su variabili di tipo char sono identiche a quelle di tipo int. Sommando, ad esempio, un carattere (riconducibile ad un numero sulla tabella del codice ASCII) ad un altro carattere (altro numero della tabella) si otterrà un carattere (corrispondente al numero sulla tabella ASCII) ottenuto dalla somma dei due caratteri precendenti.</answer_text><num_votes>1</num_votes></answer><answer id="A2920"><answer_text>Il risultato sarà un valore di tipo int risultante dall&#39;operazione desiderata , per esempi A-a=|40| che nella tabella ascii è il valore che separa i due caratteri , negli altri casi sarà la risultante delle operazioni. </answer_text><num_votes>0</num_votes></answer><answer id="A2786"><answer_text>I caratteri seguono le stesse regole operazionali degli interi. Dato che i tipi char sono codificati con ASCII 7 bit, se facciamo char c,t; e poi li sommiamo, succede che si sommano i bit che codificano i due tipi char e il risultato è un numero intero che ha subito conversione da binario a decimale e verrà stampato a video tramite un printf. </answer_text><num_votes>0</num_votes></answer><answer id="A2775"><answer_text>Il compilatore svolge l&#39;operazione sul codice ascii dei corrispettivi caratteri, percui alla fine dara&#39; comunque un&#39;altro carattere corrispondente al codice ascii del risultato dell&#39;operazione svolta e non un errore come si potrebbe immaginare. </answer_text><num_votes>2</num_votes></answer></question><question id="Q2820"><question_text>CHe cosa ci permette di fare il costruttore struct??
Quali sono le differenze tra la codifica in virgola mobile e la codifica in virgola fissa?
Per quale motivo è fortemente sconsigliato l&#39;utilizzo dell&#39;operatore == tra due variabili di tipo float o double?
Come si converte un numero in base ottale a un numero in base esadecimale? Fai un esempio.
quali operazioni si possono applicare alle variabili costruite mediante struct (non ai singoli campi)?
cosa significa fare il complemento a n (n numero naturale) di un certo numero e come si fa?
Cosa accade se eseguo un&#39;operazione fra un operando di tipo int e uno di tipo float?
Spiegare cos&#39;è la codifica in virgola mobile e come funziona.
Descrivi l&#39;algoritmo necessario per implementare la conversione la conversione da binario ad ottale.
A che scopo è utile associare un nome al tipo definito da un&#39;enumerazione? Fornisci anche un esempio
In che modo il C riesce a confrontare e ordinare i caratteri?
Come avviene la conversione da ottale a decimale?
Di che cosa si sta parlando, quando si parla di &#34;conversione implicita&#34; in C?
Qual&#39;è il procedimento da seguire per convertire un numero decimale in esadecimale?
Qual è la differenza tra il tipo &#39;struct&#39; e &#39;typedef struct&#39;?
Per quale motivo la dichiarazione del tipo di variabile è un requisito fondamentale per il compilatore?
Come è possibile definire un nuovo tipo di dati? Descrivine la procedura
Qual é la differenza tra codici ASCII a 7 bit e a 8 bit?</question_text><answer id="A2751"><answer_text>La codifica ASCII a 7 bit è stato il primo standard per la codifica dei caratteri e poteva rappresentare 128 caratteri (2^7). Di questi 128 alcuni rappresentano caratteri alfanumerici, altri sono detti caratteri non stampabili e rappresentano codici di controllo (ad esempio &#39;NULL&#39;). La codifica a 8 bit (extended ASCII) è stata sviluppata in seguito per poter codificare altri caratteri al di fuori dei 128 originali (ad esempio le lettere accentate o altri simboli di valuta).</answer_text><num_votes>2</num_votes></answer><answer id="A2855"><answer_text>Il codice ASCII fornisce una tabella che elenca le corrispondenze tra caratteri e numeri. A differenza del codice ASCII standard a 7 bit, che mette a disposizione la possibilità di rappresentare 128 caratteri (2^7 caratteri) codificati attraverso 7 bit di informazione, che conterranno la cifra binaria associata al carattere corrispondente, il codice ASCII esteso a 8 bit mette a disposizione la possibilità di rappresentare 256 caratteri diversi (2^8 caratteri), in quanto i bit vengono considerati a gruppi di 8 e non più a gruppi di 7.</answer_text><num_votes>1</num_votes></answer><answer id="A2875"><answer_text>La differenza tra un codice ASCII a 7 bit e a 8 bit consiste che il primo puo&#39; contenere al massimo 128 unita&#39; tra cui lettere maiuscoli e minuscoli, numeri (0 a 127), alcuni simboli, invece un codice ASCII a 8 bit contiene al massimo 256 unita&#39; in aggiunta all&#39;elenco precedente ci sono le lettere accentate e altri simboli che erano da quello a 7 bit.</answer_text><num_votes>0</num_votes></answer></question><question id="Q2799"><question_text>Qual è la differenza tra la rappresentazione di un numero binario in virgola fissa e in virgola mobile? Qual è la più vantaggiosa?
Quali sono le differenze tra il costruttore di tipo &#34;array&#34; e quello &#34;struct&#34;?
Come mai per rappresentare numeri interi si adottano le rappresentazioni in complemento e non si utilizzano scritture in cui semplicemente si utilizza il primo bit per il segno e i successivi per il numero?</question_text><answer id="A2903"><answer_text>Le rappresentazioni in complemento sostituiscono quelle di rappresentazione con segno esplicito perché, pur essendo meno intuitive hanno dei vantaggi: non vi è una doppia codifica per il valore zero (infatti avrebbe significato diverso a seconda che si trovi nella prima o nelle altre posizioni) e non è richiesta una circuiteria specifica per il trattamento del segno infatti nella codifica a complemento l?operazione sottrazione viene fatta eseguendo un?addizione.</answer_text><num_votes>1</num_votes></answer><answer id="A2789"><answer_text>Si utilizza il complemento perché elimina il problema della doppia rappresentazione dello 0 e della necessità di una circuiteria specifica per la gestione del segno e una semplificazione dei calcoli.Il più utilizzato è il complemento a 2, dove per la rappresentazione dei numeri si invertono i valori di ogni bit e a questo &#34;risultato&#34; Si aggiunge 1, eliminando poi eventuali resti.Esiste anche il complemento a 1, simile al precedente, ma semplicemente si invertono tutti i bit senza l&#39;aggiunta di uno.In questo metodo però troviamo ancora il problema della doppia rappresentazione dello 0. </answer_text><num_votes>1</num_votes></answer><answer id="A2925"><answer_text>Non hanno una doppia codifica per il valore &#34;zero&#34; e non richiedono una circuiteria specifica per il trattamento del segno</answer_text><num_votes>1</num_votes></answer><answer id="A2867"><answer_text>La rappresentazione in complemento è il metodo più diffuso per la rappresentazione dei numeri con segno in informatica. Il suo aspetto più importante è dato dal fatto che i circuiti di addizione e sottrazione non devono esaminare il segno di un numero rappresentato per determinare quale delle due operazioni sia necessaria si utilizza un solo circuito, il sommatore, sia per l&#39;addizione che per la sottrazione. Inoltre consente di avere un&#39;unica rappresentazione dello zero(quando tutti i bit sono zero) e di operare addizione e sottrazione sempre avendo il primo bit a indicare il segno.</answer_text><num_votes>2</num_votes></answer></question><question id="Q2920"><question_text>Che tipologie di dato possono essere inserite nelle strutture? Quanti dati possono essere contenuti all&#39; interno di una struttura? E&#39; possibile avere strutture di strutture? 
In cosa consiste una variabile di carattere enumerativo e per quali utilizzi risulta comoda?
Quando si progetta un programma che deve funzionare su diverse macchine, perché occorre verificare quanti byte vengono dedicati alla variabile di tipo intero?</question_text><answer id="A2794"><answer_text>È necessario verificare quanti byte vengono dedicati ad una variabile di tipo intero per avere una cognizione del &#39;range&#39; dei valori disponibili e poiché le operazioni su sitemi a 64 e 32 bit avvengono in maniera diversa.</answer_text><num_votes>0</num_votes></answer><answer id="A2842"><answer_text>Occorre sapere in che modo viene codificata una variabile di tipo int perché, a seconda dell&#39;architettura e del sistema operativo della destinazione, il valore massimo assegnato alla variabile potrebbe cambiare e potrebbe essere necessario effettuare modifiche e adattamenti.</answer_text><num_votes>0</num_votes></answer><answer id="A2888"><answer_text>Siccome a seconda dell&#39;architettura della macchina (hardware) è possibile avere un diverso numero di bits, al giorno d&#39;oggi si utilizzano pc con architettura a 64 bits quindi significa che i numeri che posso &#34;fisicamente&#34; rappresentare sono compresi tra 0 e 2*10^64-1 (senza segno!!), mentre per una macchina a 32 bits i valori variano tra 0 e 2*10^32-1 (senza segno). Con entrambe le architetture (64 e 32 bits) è possibile fare le stesse cose (a discapito della velocità), ad esempio tramite soluzioni software posso rappresentare numero più grandi di 2*10^32-1 anche su un architettura a 32 bits.</answer_text><num_votes>3</num_votes></answer></question><question id="Q2889"><question_text>cosa posso inserire come tipi di campo all&#39;interno di una struttura?
Qual&#39;è il procedimento da seguire per definire un tipo di dato &#34;user-define&#34;?
Per quale ragione la codifica a virgola mobile è preferibile alla codifica a virgola fissa?
Che tipo di valori può contenere una variabile di tipo double rispetto ad una variabile di tipo float?
Spiega brevemente le funzioni che svolgono i componenti dell&#39;architettura hardware di un calcolatore.</question_text><answer id="A1847"><answer_text>La CPU contiene dispositivi elettronici in grado di acquisire, interpretare ed eseguire le istruzioni; la memoria centrale (RAM) è una memoria volatile ed accoglie dati e programmi sui quali opera il calcolatore; la memoria di massa (ROM) memorizza grandi quantità di dati e programmi in maniera persistente, cioè non volatile; le periferiche permettono lo scambio di informazioni tra il calcolatore e l&#39;esterno; il Bus di sistema interconnette gli altri componenti, consentendo lo scambio di dati.</answer_text><num_votes>2</num_votes></answer><answer id="A1923"><answer_text>L&#39;architettura hardware di un calcolatore è composta da: un processore o CPU che svolge l&#39;elaborazione dei programmi, una memoria centrale o RAM utilizzata per memorizzare dati e istruzioni da eseguire,  una memoria di massa utilizzata per memorizzare grandi quantità di dati e programmi in maniera permanente (quindi non volatile come la RAM), periferiche di vario tipo ed infine un bus di sistema che interconnette tutti gli altri componenti permettendo scambio di dati tra di essi.</answer_text><num_votes>1</num_votes></answer></question><question id="Q2039"><question_text>Se devo visualizzare a video una stringa, devo inserire %s o %c nel printf?
Come si può definire un algoritmo e quali sono le sue proprietà?</question_text><answer id="A2012"><answer_text>Un algoritmo è una sequenza precisa di operazioni, comprensibili da un esecutore e definisce una sequenza finita di passi che portano alla realizzazione di un compito, (in informatica deve essere scritto in un linguaggio di programmazione comprensibile al calcolatore e la sua codifica è detta programma). Le proprietà: correttezza: l&#39;algoritmo deve essere corretto e deve portare alla soluzione del problema; efficienza: l&#39;algoritmo ottiene la risoluzione del problema usando tempo e risorse minimi.</answer_text><num_votes>3</num_votes></answer><answer id="A1897"><answer_text>Un algoritmo è un procedimento che risolve un determinato problema attraverso un numero preciso e finito di operazioni, comprensibili dall&#39;esecutore. Le sue proprietà sono due: correttezza perché l&#39;algoritmo deve pervenire alla soluzione del problema senza saltare nessun passo; ed efficienza perché l&#39;algoritmo deve arrivare al superamento del quesito con il minor numero di operazioni possibili. Ambedue queste proprietà devono coesistere per la corretta riuscita del programma.   </answer_text><num_votes>0</num_votes></answer></question><question id="Q2042"><question_text>Relativamente all&#39;architettura hardware del calcolatore la CPU in che modo riesce a gestire le periferiche e tutti i suoi componenti contemporaneamente? 
Cos&#39;è l&#39;overflow? Fai un esempio.
Cosa si intende per linguaggio ad alto livello?
Cosa sono e a cosa servono i codici ASCII?</question_text><answer id="A2004"><answer_text>Il codice ASCII è un sistema di codifica a 7 bit che viene comunemente usato nei calcolatori. Questo codice permette di determinare una tabella di codici che fanno riferimento a caratteri. I primi 32 (0-31) e il 127 sono caratteri non stampabili perché di controllo. I restanti rappresentano tutti i caratteri stampabili. Sono state proposte anche soluzioni ad 8 bit per permettere di raddoppiare i caratteri però quella ancora più comunemente utilizzata è a 7 bit. Sistema approvato ISO 646.</answer_text><num_votes>4</num_votes></answer><answer id="A1997"><answer_text>Per ASCII si intende un codice standard usato per la codifica dei caratteri. Secondo il codice &#34;extended ASCII&#34; ad ogni carattere viene riservato un byte e corrisponderà, quindi, una sequenza di 8 bit.</answer_text><num_votes>0</num_votes></answer></question><question id="Q2003"><question_text>Che cos&#39;è la macchina di &#34;von Neumann&#34;? Quali sono le differenze con una macchina astratta di linguaggio C?
Perché nell&#39;utilizzo del comando &#34;scanf&#34; è importante, dopo aver dichiarato un opportuno carattere di controllo, inserire una &#34;&#38;&#34; prima del nome della variabile nella quale vogliamo sia memorizzato il dato?
Quante variabili è possibile dichiarare? Esiste un limite?</question_text><answer id="A2022"><answer_text>Si, esiste un massimo di variabili che si possono dichiarare, ma si tratta di un numero molto grande. Questo varia a seconda del tipo di variabili che vengono utilizzate (int,float,char...) e a seconda della disponibilità di memoria RAM dove queste verranno memorizzate. A seconda del tipo di variabile perchè sappiamo bene che ogni tipo si distingue per lo spazio che occupa in memoria. Inoltre a seconda della quantità disponibile di memoria RAM perchè è in questa memoria che vengono memorizzate. </answer_text><num_votes>2</num_votes></answer><answer id="A1936"><answer_text>Il numero di variabili che è possibile dichiarare non è limitato ma varia in base alle caratteristiche tecniche del computer che si sta impiegando in fase di programmazione. </answer_text><num_votes>0</num_votes></answer><answer id="A1960"><answer_text>Non c&#39;è un limite, però se le variabili dichiarate vengono messe nello stack del programma che ha dimensione limitata è possibile che si riempia e il programma stesso vada in errore.</answer_text><num_votes>0</num_votes></answer></question><question id="Q2020"><question_text>E&#39; possibile svolgere operazioni tra variabili di tipo diverso, ad esempio una moltiplicazione tra una variabile &#34;int&#34; e una variabile &#34;float&#34;? Perché?</question_text><answer id="A1790"><answer_text>certo, ad esempio la media viene definita come somma numero int e media numero float; occorre però ricordarsi di definire poi l&#39;operazione nel campo float mettendolo tra parentesi prima dell&#39;operazione. Ad esempio media = (float) somma/x; con x indice degli elementi di cui ottenere la media.</answer_text><num_votes>0</num_votes></answer><answer id="A2011"><answer_text>Sì, è possibile effettuare operazioni tra variabili di tipo diverso, a patto che il risultato sia inserito in un contenitore di tipo float (in questo caso). Se il risultato fosse assegnato ad una variabile di tipo intero perderemo tutte le cifre decimali. Un espressione scritta correttamente è del tipo c = (float) a*b  , dove a è una variabile di tipo int e b una di tipo float.</answer_text><num_votes>3</num_votes></answer></question><question id="Q2001"><question_text>RAM e ROM sono due tipi di memoria con caratteristiche generali simili, in cosa consistono le differenze?
Che cosa significano i parametri della funzione main: &#34;(int argc, char *argv[])&#34;? 
A cosa serve la ricerca dicotomica? Perchè abbrevia il tempo di ricerca? 
Che peso hanno i diversi componenti hardware sulla velocità di un computer, in proporzione fra loro? Avendo a disposizione un budget limitato, su quali componenti sarebbe preferibile investire?
Cosa si intende per fase di fetch?
che differenza c&#39;è tra &#34;macchina fisica&#34; e &#34;macchina virtuale&#34;?
Come funziona la conversione da decimale a binario?
Perchè nella progettazione dei calcolatori è stato scelto di utilizzare il sistema binario? Sarebbe possibile progettare calcolatori che funzionano in decimale o in altre basi numeriche?
Se assegno un valore float a una variabile integer, che valore troverò poi nella variabile?
Quali valori posso attribuire ad una variabile di tipo char?
Come si presenta il contenuto di una variabile dichiarata non inizializzata?
Quali sono i bus presenti in un calcolatore e quale è il loro utilizzo?
Come mai nello scanf, dentro gli apici dove di solito scrivo %d, è meglio non scrivere altro? per esempio scanf(“valore=%d”, &#38;valore); Cosa dovrei inserire da tastiera in questo caso per assegnare un valore valido alla variabile valore?
Che differenza c&#39;è tra linguaggi compilati e linguaggi interpretati?
Qual è la differenza tra algoritmo e programma?
Quale problema si può riscontrare quando si effettuano delle operazioni con variabili di tipo float? Come si può risolvere?
Perchè è necessario svuotare il file STDIN quando si deve leggere una variabile di tipo char da tastiera?
In che modo fattori esterni, come la quantità di memoria disponibile influenzano la velocità del sistema nonostante gli impulsi del clock?
A che cosa serve il registro di stato, il registro dati ed il registro indirizzi in una CPU?
Cosa accade a una variabile, se ad essa viene assegnato un numero troppo grande (numero di bits maggiore del numero di bits che posso memorizzare), mi viene segnalato un errore di overflow oppure il programma continua assegnando il valore massimo che la variabile può contenere?
quando è necessario usare il comando di conversione delle variabili (casting)?
Spiegare le regole per la definizione di un nome di una variabile
E&#39; possibile che una variabile si chiami &#34;1counter&#34; ? Motivare la risposta. 
Le variabili: cosa succede se non si dichiara una variabile?</question_text><answer id="A1986"><answer_text>Se non si dichiara una variabile non si possono salvare i risultati delle operazioni che si effettuano</answer_text><num_votes>0</num_votes></answer><answer id="A1837"><answer_text>L&#39;esecuzione non sarà possibile. Dichiarando una variabile si riserva una certa quantità di memoria dove poi verranno inseriti i dati, quindi se non si dichiara non ci sarà nessun spazio disponibile per inserire i dati e il compilatore ci indicherà che c&#39;è un errore.</answer_text><num_votes>2</num_votes></answer><answer id="A1948"><answer_text>Se in un programma scritto in Dec c++ scrivo un programma in cui richiamo una variabile senza averla dichiarata, il compilatore in fase di compilazione mi darà errore riportandomi:&#34;undeclared (first use in this function)&#34;. In particolare dichiarare una variabile serve al compilatore per conoscere la tipologia del dato e per sapere quanto spazio andare a riservare per la variabile (char 8bit, int 16 bit, float 32 bit). </answer_text><num_votes>3</num_votes></answer></question><question id="Q2057"><question_text>quale è il &#34;ruolo&#34; del clock di sistema?
Un computer può avere più microprocessori? e se si come potrebbe essere gestita l&#39;esecuzione di un programma?
Riguardo all&#39;architettura interna della CPU,specificare le funzioni dell&#39; ALU (unità aritmetico logica) e dell&#39; UC (unità di controllo) e la relazione che intercorre esse.
Cosa si intende per sistema Legacy?
Quali sono le due caratteristiche che differiscono tra le memorie di archiviazione di massa e la memoria centrale (R.A.M.)?
Cosa sono e cosa servono i simboli %d %f %c %e %g %s %u %x ?
Qual è la relazione tra linguaggio di programmazione e linguaggio macchina? E cosa si intende per livelli di astrazione?
Per quanto riguarda il sistema operativo e la gestione della memoria centrale, in che modo funziona la &#34;rilocazione&#34;?</question_text><answer id="A1834"><answer_text>la rilocazione, all&#39;atto di caricamento del processo, mette in corrispondenza &#34;indirizzi virtuali&#34;, con &#34;indirizzi fisici&#34; dove sono presenti le risorse necessarie per il processo.</answer_text><num_votes>0</num_votes></answer><answer id="A2032"><answer_text>La Rilocazione dipende dalla mem centrale e dal sist operativo.Generalizzando,il PC legge il valore della mia variabile e attraverso il BUS del sistema le assegna uno spazio virtuale nella mem centrale.Questo spazio nn è altro che il numero binario che corrisponde al valore della variabile la cui memoria può variare in base al tipo di incognita(ex:int,char,float..).Rilocazione quindi,consiste nel spostare un blocco di dati di memoria contenente per esempio la mia variabile in un BUS del sistema.</answer_text><num_votes>0</num_votes></answer><answer id="A1929"><answer_text>La rilocazione consiste nella  traduzione da indirizzi logici , ovvero gli indirizzi generati dal processore su cui è in esecuzione un processo, a fisici , cioè la locazione esatta,  fisica nella memoria principale. Esistono due tipi diversi di rilocazione che presentano due funzionamenti fra loro differenti: quella statica e quella dinamica.Lo scopo di tale meccanismo, in entrambi i casi, è quindi quello di mettere in corrispondenza gli indirizzi logici con gli indirizzi fisici.</answer_text><num_votes>2</num_votes></answer></question><question id="Q2029"><question_text>In cosa consiste un procedimento top-down, e perchè a volte tale procedimento risulta fondamentale?
Cosa succede se assegno un valore non intero ad una variabile di tipo int? Se assegno ad esempio un valore di 3.9 e lo sommo al numero 4 cosa viene dato come risultato?
qual&#39;è stata la necessità che ha portato alla differenzazione tra memoria volatile e non volatile, e quindi perchè nel calcolatore c&#39;è bisogno di due unità di memoria (centrale e di massa) che hanno strutture completamente diverse?
Cosa significa la stringa: &#34; system(&#34;PAUSE&#34;); &#34;? E&#39; essenziale al fine del funzionamento del programma o può essere omessa?
Riguardo l&#39;allocazione di dati all&#39;interno della memoria centrale, spiegare le funzioni del registro di dati e del registro di indirizzi.
